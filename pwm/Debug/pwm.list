
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000238c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800244c  0800244c  0001244c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800247c  0800247c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800247c  0800247c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800247c  0800247c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800247c  0800247c  0001247c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002480  08002480  00012480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08002490  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08002490  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007845  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012d5  00000000  00000000  00027879  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008c0  00000000  00000000  00028b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000818  00000000  00000000  00029410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001831c  00000000  00000000  00029c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000751b  00000000  00000000  00041f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f456  00000000  00000000  0004945f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d88b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f10  00000000  00000000  000d8930  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002434 	.word	0x08002434

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002434 	.word	0x08002434

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Controller>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
int Controller()/*Функция, в которой формируется значение, подаваемое в таймер*/
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	y=y+1;/*любая математическая функция*/
 8000224:	4b08      	ldr	r3, [pc, #32]	; (8000248 <Controller+0x28>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	1c5a      	adds	r2, r3, #1
 800022a:	4b07      	ldr	r3, [pc, #28]	; (8000248 <Controller+0x28>)
 800022c:	601a      	str	r2, [r3, #0]
	if (y>=990)/*Если значение y больше 990,*/
 800022e:	4b06      	ldr	r3, [pc, #24]	; (8000248 <Controller+0x28>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a06      	ldr	r2, [pc, #24]	; (800024c <Controller+0x2c>)
 8000234:	4293      	cmp	r3, r2
 8000236:	dd02      	ble.n	800023e <Controller+0x1e>
	{
		y=0;/*то обнулим y и начнём счёт заново. Это для избежания переполнения y.*/
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <Controller+0x28>)
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
	}
	return y;/*Возвращаем вычесленный в функции y*/
 800023e:	4b02      	ldr	r3, [pc, #8]	; (8000248 <Controller+0x28>)
 8000240:	681b      	ldr	r3, [r3, #0]
}
 8000242:	0018      	movs	r0, r3
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	2000002c 	.word	0x2000002c
 800024c:	000003dd 	.word	0x000003dd

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000254:	f000 fa46 	bl	80006e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000258:	f000 f810 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025c:	f000 f8e4 	bl	8000428 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000260:	f000 f84c 	bl	80002fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);/*Даём разрешение на работу Ш�?М нашего таймера*/
 8000264:	4b04      	ldr	r3, [pc, #16]	; (8000278 <main+0x28>)
 8000266:	2108      	movs	r1, #8
 8000268:	0018      	movs	r0, r3
 800026a:	f001 faad 	bl	80017c8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);/*Даём разрешение на организацию прерываний*/
 800026e:	4b02      	ldr	r3, [pc, #8]	; (8000278 <main+0x28>)
 8000270:	0018      	movs	r0, r3
 8000272:	f001 fa07 	bl	8001684 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000276:	e7fe      	b.n	8000276 <main+0x26>
 8000278:	20000030 	.word	0x20000030

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b093      	sub	sp, #76	; 0x4c
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	2414      	movs	r4, #20
 8000284:	193b      	adds	r3, r7, r4
 8000286:	0018      	movs	r0, r3
 8000288:	2334      	movs	r3, #52	; 0x34
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f002 f8c9 	bl	8002424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	0018      	movs	r0, r3
 8000296:	2310      	movs	r3, #16
 8000298:	001a      	movs	r2, r3
 800029a:	2100      	movs	r1, #0
 800029c:	f002 f8c2 	bl	8002424 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a0:	0021      	movs	r1, r4
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2202      	movs	r2, #2
 80002a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2201      	movs	r2, #1
 80002ac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2210      	movs	r2, #16
 80002b2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2200      	movs	r2, #0
 80002b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	0018      	movs	r0, r3
 80002be:	f000 fd03 	bl	8000cc8 <HAL_RCC_OscConfig>
 80002c2:	1e03      	subs	r3, r0, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002c6:	f000 f929 	bl	800051c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2207      	movs	r2, #7
 80002ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2100      	movs	r1, #0
 80002e6:	0018      	movs	r0, r3
 80002e8:	f001 f874 	bl	80013d4 <HAL_RCC_ClockConfig>
 80002ec:	1e03      	subs	r3, r0, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002f0:	f000 f914 	bl	800051c <Error_Handler>
  }
}
 80002f4:	46c0      	nop			; (mov r8, r8)
 80002f6:	46bd      	mov	sp, r7
 80002f8:	b013      	add	sp, #76	; 0x4c
 80002fa:	bd90      	pop	{r4, r7, pc}

080002fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b092      	sub	sp, #72	; 0x48
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000302:	2340      	movs	r3, #64	; 0x40
 8000304:	18fb      	adds	r3, r7, r3
 8000306:	0018      	movs	r0, r3
 8000308:	2308      	movs	r3, #8
 800030a:	001a      	movs	r2, r3
 800030c:	2100      	movs	r1, #0
 800030e:	f002 f889 	bl	8002424 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000312:	2324      	movs	r3, #36	; 0x24
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	0018      	movs	r0, r3
 8000318:	231c      	movs	r3, #28
 800031a:	001a      	movs	r2, r3
 800031c:	2100      	movs	r1, #0
 800031e:	f002 f881 	bl	8002424 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	0018      	movs	r0, r3
 8000326:	2320      	movs	r3, #32
 8000328:	001a      	movs	r2, r3
 800032a:	2100      	movs	r1, #0
 800032c:	f002 f87a 	bl	8002424 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000330:	4b3b      	ldr	r3, [pc, #236]	; (8000420 <MX_TIM1_Init+0x124>)
 8000332:	4a3c      	ldr	r2, [pc, #240]	; (8000424 <MX_TIM1_Init+0x128>)
 8000334:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8000336:	4b3a      	ldr	r3, [pc, #232]	; (8000420 <MX_TIM1_Init+0x124>)
 8000338:	2207      	movs	r2, #7
 800033a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800033c:	4b38      	ldr	r3, [pc, #224]	; (8000420 <MX_TIM1_Init+0x124>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000342:	4b37      	ldr	r3, [pc, #220]	; (8000420 <MX_TIM1_Init+0x124>)
 8000344:	22fa      	movs	r2, #250	; 0xfa
 8000346:	0092      	lsls	r2, r2, #2
 8000348:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034a:	4b35      	ldr	r3, [pc, #212]	; (8000420 <MX_TIM1_Init+0x124>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000350:	4b33      	ldr	r3, [pc, #204]	; (8000420 <MX_TIM1_Init+0x124>)
 8000352:	2200      	movs	r2, #0
 8000354:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000356:	4b32      	ldr	r3, [pc, #200]	; (8000420 <MX_TIM1_Init+0x124>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800035c:	4b30      	ldr	r3, [pc, #192]	; (8000420 <MX_TIM1_Init+0x124>)
 800035e:	0018      	movs	r0, r3
 8000360:	f001 f9e2 	bl	8001728 <HAL_TIM_PWM_Init>
 8000364:	1e03      	subs	r3, r0, #0
 8000366:	d001      	beq.n	800036c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000368:	f000 f8d8 	bl	800051c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800036c:	2140      	movs	r1, #64	; 0x40
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2200      	movs	r2, #0
 8000378:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800037a:	187a      	adds	r2, r7, r1
 800037c:	4b28      	ldr	r3, [pc, #160]	; (8000420 <MX_TIM1_Init+0x124>)
 800037e:	0011      	movs	r1, r2
 8000380:	0018      	movs	r0, r3
 8000382:	f001 ff5f 	bl	8002244 <HAL_TIMEx_MasterConfigSynchronization>
 8000386:	1e03      	subs	r3, r0, #0
 8000388:	d001      	beq.n	800038e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800038a:	f000 f8c7 	bl	800051c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800038e:	2124      	movs	r1, #36	; 0x24
 8000390:	187b      	adds	r3, r7, r1
 8000392:	2260      	movs	r2, #96	; 0x60
 8000394:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000396:	187b      	adds	r3, r7, r1
 8000398:	2200      	movs	r2, #0
 800039a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800039c:	187b      	adds	r3, r7, r1
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	2200      	movs	r2, #0
 80003a6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2200      	movs	r2, #0
 80003b2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2200      	movs	r2, #0
 80003b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003ba:	1879      	adds	r1, r7, r1
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <MX_TIM1_Init+0x124>)
 80003be:	2208      	movs	r2, #8
 80003c0:	0018      	movs	r0, r3
 80003c2:	f001 fbcf 	bl	8001b64 <HAL_TIM_PWM_ConfigChannel>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80003ca:	f000 f8a7 	bl	800051c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2280      	movs	r2, #128	; 0x80
 80003f0:	0192      	lsls	r2, r2, #6
 80003f2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003fa:	1d3a      	adds	r2, r7, #4
 80003fc:	4b08      	ldr	r3, [pc, #32]	; (8000420 <MX_TIM1_Init+0x124>)
 80003fe:	0011      	movs	r1, r2
 8000400:	0018      	movs	r0, r3
 8000402:	f001 ff7d 	bl	8002300 <HAL_TIMEx_ConfigBreakDeadTime>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d001      	beq.n	800040e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800040a:	f000 f887 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800040e:	4b04      	ldr	r3, [pc, #16]	; (8000420 <MX_TIM1_Init+0x124>)
 8000410:	0018      	movs	r0, r3
 8000412:	f000 f8d3 	bl	80005bc <HAL_TIM_MspPostInit>

}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	b012      	add	sp, #72	; 0x48
 800041c:	bd80      	pop	{r7, pc}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	20000030 	.word	0x20000030
 8000424:	40012c00 	.word	0x40012c00

08000428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000428:	b590      	push	{r4, r7, lr}
 800042a:	b089      	sub	sp, #36	; 0x24
 800042c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	240c      	movs	r4, #12
 8000430:	193b      	adds	r3, r7, r4
 8000432:	0018      	movs	r0, r3
 8000434:	2314      	movs	r3, #20
 8000436:	001a      	movs	r2, r3
 8000438:	2100      	movs	r1, #0
 800043a:	f001 fff3 	bl	8002424 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800043e:	4b23      	ldr	r3, [pc, #140]	; (80004cc <MX_GPIO_Init+0xa4>)
 8000440:	695a      	ldr	r2, [r3, #20]
 8000442:	4b22      	ldr	r3, [pc, #136]	; (80004cc <MX_GPIO_Init+0xa4>)
 8000444:	2180      	movs	r1, #128	; 0x80
 8000446:	03c9      	lsls	r1, r1, #15
 8000448:	430a      	orrs	r2, r1
 800044a:	615a      	str	r2, [r3, #20]
 800044c:	4b1f      	ldr	r3, [pc, #124]	; (80004cc <MX_GPIO_Init+0xa4>)
 800044e:	695a      	ldr	r2, [r3, #20]
 8000450:	2380      	movs	r3, #128	; 0x80
 8000452:	03db      	lsls	r3, r3, #15
 8000454:	4013      	ands	r3, r2
 8000456:	60bb      	str	r3, [r7, #8]
 8000458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045a:	4b1c      	ldr	r3, [pc, #112]	; (80004cc <MX_GPIO_Init+0xa4>)
 800045c:	695a      	ldr	r2, [r3, #20]
 800045e:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <MX_GPIO_Init+0xa4>)
 8000460:	2180      	movs	r1, #128	; 0x80
 8000462:	02c9      	lsls	r1, r1, #11
 8000464:	430a      	orrs	r2, r1
 8000466:	615a      	str	r2, [r3, #20]
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <MX_GPIO_Init+0xa4>)
 800046a:	695a      	ldr	r2, [r3, #20]
 800046c:	2380      	movs	r3, #128	; 0x80
 800046e:	02db      	lsls	r3, r3, #11
 8000470:	4013      	ands	r3, r2
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000476:	4b15      	ldr	r3, [pc, #84]	; (80004cc <MX_GPIO_Init+0xa4>)
 8000478:	695a      	ldr	r2, [r3, #20]
 800047a:	4b14      	ldr	r3, [pc, #80]	; (80004cc <MX_GPIO_Init+0xa4>)
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	0289      	lsls	r1, r1, #10
 8000480:	430a      	orrs	r2, r1
 8000482:	615a      	str	r2, [r3, #20]
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <MX_GPIO_Init+0xa4>)
 8000486:	695a      	ldr	r2, [r3, #20]
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	029b      	lsls	r3, r3, #10
 800048c:	4013      	ands	r3, r2
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_GPIO_Init+0xa8>)
 8000494:	2200      	movs	r2, #0
 8000496:	2104      	movs	r1, #4
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fbdd 	bl	8000c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800049e:	0021      	movs	r1, r4
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2204      	movs	r2, #4
 80004a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2201      	movs	r2, #1
 80004aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <MX_GPIO_Init+0xa8>)
 80004bc:	0019      	movs	r1, r3
 80004be:	0010      	movs	r0, r2
 80004c0:	f000 fa52 	bl	8000968 <HAL_GPIO_Init>

}
 80004c4:	46c0      	nop			; (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b009      	add	sp, #36	; 0x24
 80004ca:	bd90      	pop	{r4, r7, pc}
 80004cc:	40021000 	.word	0x40021000
 80004d0:	48000400 	.word	0x48000400

080004d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)/*CallBack, вызванный при окончании периода Ш�?М*/
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)/*Проверяем от какого таймера пришёл CallBack*/
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0a      	ldr	r2, [pc, #40]	; (800050c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d10e      	bne.n	8000504 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		pwm = Controller();/*В переменную pwm запишем результат вычисления функции Controller*/
 80004e6:	f7ff fe9b 	bl	8000220 <Controller>
 80004ea:	0002      	movs	r2, r0
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80004ee:	601a      	str	r2, [r3, #0]
		htim1.Instance->CCR3 = pwm;/*Запишем значение pwm в регистр CCR3 выбранного таймера, что позволит получить Ш�?М*/
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);/*Поменяем состояние светодиода*/
 80004fa:	4b07      	ldr	r3, [pc, #28]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80004fc:	2104      	movs	r1, #4
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 fbc7 	bl	8000c92 <HAL_GPIO_TogglePin>
	}
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b002      	add	sp, #8
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40012c00 	.word	0x40012c00
 8000510:	20000028 	.word	0x20000028
 8000514:	20000030 	.word	0x20000030
 8000518:	48000400 	.word	0x48000400

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000522:	e7fe      	b.n	8000522 <Error_Handler+0x6>

08000524 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <HAL_MspInit+0x44>)
 800052c:	699a      	ldr	r2, [r3, #24]
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <HAL_MspInit+0x44>)
 8000530:	2101      	movs	r1, #1
 8000532:	430a      	orrs	r2, r1
 8000534:	619a      	str	r2, [r3, #24]
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <HAL_MspInit+0x44>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	2201      	movs	r2, #1
 800053c:	4013      	ands	r3, r2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <HAL_MspInit+0x44>)
 8000544:	69da      	ldr	r2, [r3, #28]
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <HAL_MspInit+0x44>)
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	0549      	lsls	r1, r1, #21
 800054c:	430a      	orrs	r2, r1
 800054e:	61da      	str	r2, [r3, #28]
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <HAL_MspInit+0x44>)
 8000552:	69da      	ldr	r2, [r3, #28]
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	055b      	lsls	r3, r3, #21
 8000558:	4013      	ands	r3, r2
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	b002      	add	sp, #8
 8000564:	bd80      	pop	{r7, pc}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	40021000 	.word	0x40021000

0800056c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <HAL_TIM_PWM_MspInit+0x48>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d115      	bne.n	80005aa <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <HAL_TIM_PWM_MspInit+0x4c>)
 8000580:	699a      	ldr	r2, [r3, #24]
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <HAL_TIM_PWM_MspInit+0x4c>)
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	0109      	lsls	r1, r1, #4
 8000588:	430a      	orrs	r2, r1
 800058a:	619a      	str	r2, [r3, #24]
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <HAL_TIM_PWM_MspInit+0x4c>)
 800058e:	699a      	ldr	r2, [r3, #24]
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	011b      	lsls	r3, r3, #4
 8000594:	4013      	ands	r3, r2
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	200d      	movs	r0, #13
 80005a0:	f000 f9b0 	bl	8000904 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80005a4:	200d      	movs	r0, #13
 80005a6:	f000 f9c2 	bl	800092e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b004      	add	sp, #16
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	40012c00 	.word	0x40012c00
 80005b8:	40021000 	.word	0x40021000

080005bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	230c      	movs	r3, #12
 80005c6:	18fb      	adds	r3, r7, r3
 80005c8:	0018      	movs	r0, r3
 80005ca:	2314      	movs	r3, #20
 80005cc:	001a      	movs	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	f001 ff28 	bl	8002424 <memset>
  if(htim->Instance==TIM1)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a16      	ldr	r2, [pc, #88]	; (8000634 <HAL_TIM_MspPostInit+0x78>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d125      	bne.n	800062a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <HAL_TIM_MspPostInit+0x7c>)
 80005e0:	695a      	ldr	r2, [r3, #20]
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <HAL_TIM_MspPostInit+0x7c>)
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	0289      	lsls	r1, r1, #10
 80005e8:	430a      	orrs	r2, r1
 80005ea:	615a      	str	r2, [r3, #20]
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_TIM_MspPostInit+0x7c>)
 80005ee:	695a      	ldr	r2, [r3, #20]
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	029b      	lsls	r3, r3, #10
 80005f4:	4013      	ands	r3, r2
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005fa:	210c      	movs	r1, #12
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	00d2      	lsls	r2, r2, #3
 8000602:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2202      	movs	r2, #2
 8000608:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2202      	movs	r2, #2
 800061a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	187a      	adds	r2, r7, r1
 800061e:	2390      	movs	r3, #144	; 0x90
 8000620:	05db      	lsls	r3, r3, #23
 8000622:	0011      	movs	r1, r2
 8000624:	0018      	movs	r0, r3
 8000626:	f000 f99f 	bl	8000968 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b008      	add	sp, #32
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	40012c00 	.word	0x40012c00
 8000638:	40021000 	.word	0x40021000

0800063c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <NMI_Handler+0x4>

08000642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000646:	e7fe      	b.n	8000646 <HardFault_Handler+0x4>

08000648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000660:	f000 f888 	bl	8000774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000672:	0018      	movs	r0, r3
 8000674:	f001 f960 	bl	8001938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	20000030 	.word	0x20000030

08000684 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000692:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <LoopForever+0x6>)
  ldr r1, =_edata
 8000696:	490e      	ldr	r1, [pc, #56]	; (80006d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000698:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <LoopForever+0xe>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800069c:	e002      	b.n	80006a4 <LoopCopyDataInit>

0800069e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a2:	3304      	adds	r3, #4

080006a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a8:	d3f9      	bcc.n	800069e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006aa:	4a0b      	ldr	r2, [pc, #44]	; (80006d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006ac:	4c0b      	ldr	r4, [pc, #44]	; (80006dc <LoopForever+0x16>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b0:	e001      	b.n	80006b6 <LoopFillZerobss>

080006b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b4:	3204      	adds	r2, #4

080006b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b8:	d3fb      	bcc.n	80006b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006ba:	f7ff ffe3 	bl	8000684 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80006be:	f001 fe8d 	bl	80023dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c2:	f7ff fdc5 	bl	8000250 <main>

080006c6 <LoopForever>:

LoopForever:
    b LoopForever
 80006c6:	e7fe      	b.n	80006c6 <LoopForever>
  ldr   r0, =_estack
 80006c8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006d4:	08002484 	.word	0x08002484
  ldr r2, =_sbss
 80006d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006dc:	2000007c 	.word	0x2000007c

080006e0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC1_COMP_IRQHandler>
	...

080006e4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <HAL_Init+0x24>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_Init+0x24>)
 80006ee:	2110      	movs	r1, #16
 80006f0:	430a      	orrs	r2, r1
 80006f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 f809 	bl	800070c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006fa:	f7ff ff13 	bl	8000524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006fe:	2300      	movs	r3, #0
}
 8000700:	0018      	movs	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	40022000 	.word	0x40022000

0800070c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <HAL_InitTick+0x5c>)
 8000716:	681c      	ldr	r4, [r3, #0]
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <HAL_InitTick+0x60>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	0019      	movs	r1, r3
 800071e:	23fa      	movs	r3, #250	; 0xfa
 8000720:	0098      	lsls	r0, r3, #2
 8000722:	f7ff fcf1 	bl	8000108 <__udivsi3>
 8000726:	0003      	movs	r3, r0
 8000728:	0019      	movs	r1, r3
 800072a:	0020      	movs	r0, r4
 800072c:	f7ff fcec 	bl	8000108 <__udivsi3>
 8000730:	0003      	movs	r3, r0
 8000732:	0018      	movs	r0, r3
 8000734:	f000 f90b 	bl	800094e <HAL_SYSTICK_Config>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800073c:	2301      	movs	r3, #1
 800073e:	e00f      	b.n	8000760 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b03      	cmp	r3, #3
 8000744:	d80b      	bhi.n	800075e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	2301      	movs	r3, #1
 800074a:	425b      	negs	r3, r3
 800074c:	2200      	movs	r2, #0
 800074e:	0018      	movs	r0, r3
 8000750:	f000 f8d8 	bl	8000904 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_InitTick+0x64>)
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800075a:	2300      	movs	r3, #0
 800075c:	e000      	b.n	8000760 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
}
 8000760:	0018      	movs	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	b003      	add	sp, #12
 8000766:	bd90      	pop	{r4, r7, pc}
 8000768:	20000000 	.word	0x20000000
 800076c:	20000008 	.word	0x20000008
 8000770:	20000004 	.word	0x20000004

08000774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <HAL_IncTick+0x1c>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	001a      	movs	r2, r3
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_IncTick+0x20>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	18d2      	adds	r2, r2, r3
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <HAL_IncTick+0x20>)
 8000786:	601a      	str	r2, [r3, #0]
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	20000008 	.word	0x20000008
 8000794:	20000078 	.word	0x20000078

08000798 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  return uwTick;
 800079c:	4b02      	ldr	r3, [pc, #8]	; (80007a8 <HAL_GetTick+0x10>)
 800079e:	681b      	ldr	r3, [r3, #0]
}
 80007a0:	0018      	movs	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	20000078 	.word	0x20000078

080007ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	0002      	movs	r2, r0
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007b8:	1dfb      	adds	r3, r7, #7
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b7f      	cmp	r3, #127	; 0x7f
 80007be:	d809      	bhi.n	80007d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	001a      	movs	r2, r3
 80007c6:	231f      	movs	r3, #31
 80007c8:	401a      	ands	r2, r3
 80007ca:	4b04      	ldr	r3, [pc, #16]	; (80007dc <__NVIC_EnableIRQ+0x30>)
 80007cc:	2101      	movs	r1, #1
 80007ce:	4091      	lsls	r1, r2
 80007d0:	000a      	movs	r2, r1
 80007d2:	601a      	str	r2, [r3, #0]
  }
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b002      	add	sp, #8
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	e000e100 	.word	0xe000e100

080007e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	0002      	movs	r2, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	1dfb      	adds	r3, r7, #7
 80007ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007ee:	1dfb      	adds	r3, r7, #7
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b7f      	cmp	r3, #127	; 0x7f
 80007f4:	d828      	bhi.n	8000848 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007f6:	4a2f      	ldr	r2, [pc, #188]	; (80008b4 <__NVIC_SetPriority+0xd4>)
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b25b      	sxtb	r3, r3
 80007fe:	089b      	lsrs	r3, r3, #2
 8000800:	33c0      	adds	r3, #192	; 0xc0
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	589b      	ldr	r3, [r3, r2]
 8000806:	1dfa      	adds	r2, r7, #7
 8000808:	7812      	ldrb	r2, [r2, #0]
 800080a:	0011      	movs	r1, r2
 800080c:	2203      	movs	r2, #3
 800080e:	400a      	ands	r2, r1
 8000810:	00d2      	lsls	r2, r2, #3
 8000812:	21ff      	movs	r1, #255	; 0xff
 8000814:	4091      	lsls	r1, r2
 8000816:	000a      	movs	r2, r1
 8000818:	43d2      	mvns	r2, r2
 800081a:	401a      	ands	r2, r3
 800081c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	019b      	lsls	r3, r3, #6
 8000822:	22ff      	movs	r2, #255	; 0xff
 8000824:	401a      	ands	r2, r3
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	0018      	movs	r0, r3
 800082c:	2303      	movs	r3, #3
 800082e:	4003      	ands	r3, r0
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000834:	481f      	ldr	r0, [pc, #124]	; (80008b4 <__NVIC_SetPriority+0xd4>)
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	b25b      	sxtb	r3, r3
 800083c:	089b      	lsrs	r3, r3, #2
 800083e:	430a      	orrs	r2, r1
 8000840:	33c0      	adds	r3, #192	; 0xc0
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000846:	e031      	b.n	80008ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000848:	4a1b      	ldr	r2, [pc, #108]	; (80008b8 <__NVIC_SetPriority+0xd8>)
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	0019      	movs	r1, r3
 8000850:	230f      	movs	r3, #15
 8000852:	400b      	ands	r3, r1
 8000854:	3b08      	subs	r3, #8
 8000856:	089b      	lsrs	r3, r3, #2
 8000858:	3306      	adds	r3, #6
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	18d3      	adds	r3, r2, r3
 800085e:	3304      	adds	r3, #4
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	1dfa      	adds	r2, r7, #7
 8000864:	7812      	ldrb	r2, [r2, #0]
 8000866:	0011      	movs	r1, r2
 8000868:	2203      	movs	r2, #3
 800086a:	400a      	ands	r2, r1
 800086c:	00d2      	lsls	r2, r2, #3
 800086e:	21ff      	movs	r1, #255	; 0xff
 8000870:	4091      	lsls	r1, r2
 8000872:	000a      	movs	r2, r1
 8000874:	43d2      	mvns	r2, r2
 8000876:	401a      	ands	r2, r3
 8000878:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	019b      	lsls	r3, r3, #6
 800087e:	22ff      	movs	r2, #255	; 0xff
 8000880:	401a      	ands	r2, r3
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	0018      	movs	r0, r3
 8000888:	2303      	movs	r3, #3
 800088a:	4003      	ands	r3, r0
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000890:	4809      	ldr	r0, [pc, #36]	; (80008b8 <__NVIC_SetPriority+0xd8>)
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	001c      	movs	r4, r3
 8000898:	230f      	movs	r3, #15
 800089a:	4023      	ands	r3, r4
 800089c:	3b08      	subs	r3, #8
 800089e:	089b      	lsrs	r3, r3, #2
 80008a0:	430a      	orrs	r2, r1
 80008a2:	3306      	adds	r3, #6
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	18c3      	adds	r3, r0, r3
 80008a8:	3304      	adds	r3, #4
 80008aa:	601a      	str	r2, [r3, #0]
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b003      	add	sp, #12
 80008b2:	bd90      	pop	{r4, r7, pc}
 80008b4:	e000e100 	.word	0xe000e100
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	4a0c      	ldr	r2, [pc, #48]	; (80008fc <SysTick_Config+0x40>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d901      	bls.n	80008d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ce:	2301      	movs	r3, #1
 80008d0:	e010      	b.n	80008f4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <SysTick_Config+0x44>)
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	3a01      	subs	r2, #1
 80008d8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008da:	2301      	movs	r3, #1
 80008dc:	425b      	negs	r3, r3
 80008de:	2103      	movs	r1, #3
 80008e0:	0018      	movs	r0, r3
 80008e2:	f7ff ff7d 	bl	80007e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <SysTick_Config+0x44>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <SysTick_Config+0x44>)
 80008ee:	2207      	movs	r2, #7
 80008f0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	0018      	movs	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b002      	add	sp, #8
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	00ffffff 	.word	0x00ffffff
 8000900:	e000e010 	.word	0xe000e010

08000904 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
 800090e:	210f      	movs	r1, #15
 8000910:	187b      	adds	r3, r7, r1
 8000912:	1c02      	adds	r2, r0, #0
 8000914:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	187b      	adds	r3, r7, r1
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b25b      	sxtb	r3, r3
 800091e:	0011      	movs	r1, r2
 8000920:	0018      	movs	r0, r3
 8000922:	f7ff ff5d 	bl	80007e0 <__NVIC_SetPriority>
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b004      	add	sp, #16
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	0002      	movs	r2, r0
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b25b      	sxtb	r3, r3
 8000940:	0018      	movs	r0, r3
 8000942:	f7ff ff33 	bl	80007ac <__NVIC_EnableIRQ>
}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b002      	add	sp, #8
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0018      	movs	r0, r3
 800095a:	f7ff ffaf 	bl	80008bc <SysTick_Config>
 800095e:	0003      	movs	r3, r0
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	b002      	add	sp, #8
 8000966:	bd80      	pop	{r7, pc}

08000968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000976:	e155      	b.n	8000c24 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2101      	movs	r1, #1
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	4091      	lsls	r1, r2
 8000982:	000a      	movs	r2, r1
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d100      	bne.n	8000990 <HAL_GPIO_Init+0x28>
 800098e:	e146      	b.n	8000c1e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d00b      	beq.n	80009b0 <HAL_GPIO_Init+0x48>
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	2b02      	cmp	r3, #2
 800099e:	d007      	beq.n	80009b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009a4:	2b11      	cmp	r3, #17
 80009a6:	d003      	beq.n	80009b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b12      	cmp	r3, #18
 80009ae:	d130      	bne.n	8000a12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	2203      	movs	r2, #3
 80009bc:	409a      	lsls	r2, r3
 80009be:	0013      	movs	r3, r2
 80009c0:	43da      	mvns	r2, r3
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	68da      	ldr	r2, [r3, #12]
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	409a      	lsls	r2, r3
 80009d2:	0013      	movs	r3, r2
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009e6:	2201      	movs	r2, #1
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	409a      	lsls	r2, r3
 80009ec:	0013      	movs	r3, r2
 80009ee:	43da      	mvns	r2, r3
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	091b      	lsrs	r3, r3, #4
 80009fc:	2201      	movs	r2, #1
 80009fe:	401a      	ands	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	409a      	lsls	r2, r3
 8000a04:	0013      	movs	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	409a      	lsls	r2, r3
 8000a20:	0013      	movs	r3, r2
 8000a22:	43da      	mvns	r2, r3
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	4013      	ands	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	409a      	lsls	r2, r3
 8000a34:	0013      	movs	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d003      	beq.n	8000a52 <HAL_GPIO_Init+0xea>
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	2b12      	cmp	r3, #18
 8000a50:	d123      	bne.n	8000a9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	08da      	lsrs	r2, r3, #3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3208      	adds	r2, #8
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	58d3      	ldr	r3, [r2, r3]
 8000a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	2207      	movs	r2, #7
 8000a64:	4013      	ands	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	220f      	movs	r2, #15
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	691a      	ldr	r2, [r3, #16]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	2107      	movs	r1, #7
 8000a7e:	400b      	ands	r3, r1
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	409a      	lsls	r2, r3
 8000a84:	0013      	movs	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	08da      	lsrs	r2, r3, #3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3208      	adds	r2, #8
 8000a94:	0092      	lsls	r2, r2, #2
 8000a96:	6939      	ldr	r1, [r7, #16]
 8000a98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	409a      	lsls	r2, r3
 8000aa8:	0013      	movs	r3, r2
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	401a      	ands	r2, r3
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	409a      	lsls	r2, r3
 8000ac0:	0013      	movs	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	055b      	lsls	r3, r3, #21
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	d100      	bne.n	8000adc <HAL_GPIO_Init+0x174>
 8000ada:	e0a0      	b.n	8000c1e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000adc:	4b57      	ldr	r3, [pc, #348]	; (8000c3c <HAL_GPIO_Init+0x2d4>)
 8000ade:	699a      	ldr	r2, [r3, #24]
 8000ae0:	4b56      	ldr	r3, [pc, #344]	; (8000c3c <HAL_GPIO_Init+0x2d4>)
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	619a      	str	r2, [r3, #24]
 8000ae8:	4b54      	ldr	r3, [pc, #336]	; (8000c3c <HAL_GPIO_Init+0x2d4>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	2201      	movs	r2, #1
 8000aee:	4013      	ands	r3, r2
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000af4:	4a52      	ldr	r2, [pc, #328]	; (8000c40 <HAL_GPIO_Init+0x2d8>)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	589b      	ldr	r3, [r3, r2]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	2203      	movs	r2, #3
 8000b06:	4013      	ands	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	220f      	movs	r2, #15
 8000b0c:	409a      	lsls	r2, r3
 8000b0e:	0013      	movs	r3, r2
 8000b10:	43da      	mvns	r2, r3
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	2390      	movs	r3, #144	; 0x90
 8000b1c:	05db      	lsls	r3, r3, #23
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d019      	beq.n	8000b56 <HAL_GPIO_Init+0x1ee>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a47      	ldr	r2, [pc, #284]	; (8000c44 <HAL_GPIO_Init+0x2dc>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d013      	beq.n	8000b52 <HAL_GPIO_Init+0x1ea>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a46      	ldr	r2, [pc, #280]	; (8000c48 <HAL_GPIO_Init+0x2e0>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d00d      	beq.n	8000b4e <HAL_GPIO_Init+0x1e6>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a45      	ldr	r2, [pc, #276]	; (8000c4c <HAL_GPIO_Init+0x2e4>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d007      	beq.n	8000b4a <HAL_GPIO_Init+0x1e2>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a44      	ldr	r2, [pc, #272]	; (8000c50 <HAL_GPIO_Init+0x2e8>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d101      	bne.n	8000b46 <HAL_GPIO_Init+0x1de>
 8000b42:	2304      	movs	r3, #4
 8000b44:	e008      	b.n	8000b58 <HAL_GPIO_Init+0x1f0>
 8000b46:	2305      	movs	r3, #5
 8000b48:	e006      	b.n	8000b58 <HAL_GPIO_Init+0x1f0>
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	e004      	b.n	8000b58 <HAL_GPIO_Init+0x1f0>
 8000b4e:	2302      	movs	r3, #2
 8000b50:	e002      	b.n	8000b58 <HAL_GPIO_Init+0x1f0>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <HAL_GPIO_Init+0x1f0>
 8000b56:	2300      	movs	r3, #0
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	400a      	ands	r2, r1
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	4093      	lsls	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b68:	4935      	ldr	r1, [pc, #212]	; (8000c40 <HAL_GPIO_Init+0x2d8>)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	089b      	lsrs	r3, r3, #2
 8000b6e:	3302      	adds	r3, #2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b76:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <HAL_GPIO_Init+0x2ec>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	025b      	lsls	r3, r3, #9
 8000b8e:	4013      	ands	r3, r2
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b9a:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <HAL_GPIO_Init+0x2ec>)
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ba0:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <HAL_GPIO_Init+0x2ec>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	43da      	mvns	r2, r3
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	029b      	lsls	r3, r3, #10
 8000bb8:	4013      	ands	r3, r2
 8000bba:	d003      	beq.n	8000bc4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bc4:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <HAL_GPIO_Init+0x2ec>)
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bca:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <HAL_GPIO_Init+0x2ec>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	2380      	movs	r3, #128	; 0x80
 8000be0:	035b      	lsls	r3, r3, #13
 8000be2:	4013      	ands	r3, r2
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <HAL_GPIO_Init+0x2ec>)
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_GPIO_Init+0x2ec>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	43da      	mvns	r2, r3
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	039b      	lsls	r3, r3, #14
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_GPIO_Init+0x2ec>)
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	3301      	adds	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	40da      	lsrs	r2, r3
 8000c2c:	1e13      	subs	r3, r2, #0
 8000c2e:	d000      	beq.n	8000c32 <HAL_GPIO_Init+0x2ca>
 8000c30:	e6a2      	b.n	8000978 <HAL_GPIO_Init+0x10>
  } 
}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b006      	add	sp, #24
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010000 	.word	0x40010000
 8000c44:	48000400 	.word	0x48000400
 8000c48:	48000800 	.word	0x48000800
 8000c4c:	48000c00 	.word	0x48000c00
 8000c50:	48001000 	.word	0x48001000
 8000c54:	40010400 	.word	0x40010400

08000c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	0008      	movs	r0, r1
 8000c62:	0011      	movs	r1, r2
 8000c64:	1cbb      	adds	r3, r7, #2
 8000c66:	1c02      	adds	r2, r0, #0
 8000c68:	801a      	strh	r2, [r3, #0]
 8000c6a:	1c7b      	adds	r3, r7, #1
 8000c6c:	1c0a      	adds	r2, r1, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c70:	1c7b      	adds	r3, r7, #1
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d004      	beq.n	8000c82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c78:	1cbb      	adds	r3, r7, #2
 8000c7a:	881a      	ldrh	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c80:	e003      	b.n	8000c8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c82:	1cbb      	adds	r3, r7, #2
 8000c84:	881a      	ldrh	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b084      	sub	sp, #16
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	000a      	movs	r2, r1
 8000c9c:	1cbb      	adds	r3, r7, #2
 8000c9e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	695b      	ldr	r3, [r3, #20]
 8000ca4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ca6:	1cbb      	adds	r3, r7, #2
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	4013      	ands	r3, r2
 8000cae:	041a      	lsls	r2, r3, #16
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	1cb9      	adds	r1, r7, #2
 8000cb6:	8809      	ldrh	r1, [r1, #0]
 8000cb8:	400b      	ands	r3, r1
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	619a      	str	r2, [r3, #24]
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b004      	add	sp, #16
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d102      	bne.n	8000cdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	f000 fb76 	bl	80013c8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	d100      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x20>
 8000ce6:	e08e      	b.n	8000e06 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ce8:	4bc5      	ldr	r3, [pc, #788]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	220c      	movs	r2, #12
 8000cee:	4013      	ands	r3, r2
 8000cf0:	2b04      	cmp	r3, #4
 8000cf2:	d00e      	beq.n	8000d12 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cf4:	4bc2      	ldr	r3, [pc, #776]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	220c      	movs	r2, #12
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	2b08      	cmp	r3, #8
 8000cfe:	d117      	bne.n	8000d30 <HAL_RCC_OscConfig+0x68>
 8000d00:	4bbf      	ldr	r3, [pc, #764]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	23c0      	movs	r3, #192	; 0xc0
 8000d06:	025b      	lsls	r3, r3, #9
 8000d08:	401a      	ands	r2, r3
 8000d0a:	2380      	movs	r3, #128	; 0x80
 8000d0c:	025b      	lsls	r3, r3, #9
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d10e      	bne.n	8000d30 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d12:	4bbb      	ldr	r3, [pc, #748]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	2380      	movs	r3, #128	; 0x80
 8000d18:	029b      	lsls	r3, r3, #10
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	d100      	bne.n	8000d20 <HAL_RCC_OscConfig+0x58>
 8000d1e:	e071      	b.n	8000e04 <HAL_RCC_OscConfig+0x13c>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d000      	beq.n	8000d2a <HAL_RCC_OscConfig+0x62>
 8000d28:	e06c      	b.n	8000e04 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	f000 fb4c 	bl	80013c8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d107      	bne.n	8000d48 <HAL_RCC_OscConfig+0x80>
 8000d38:	4bb1      	ldr	r3, [pc, #708]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4bb0      	ldr	r3, [pc, #704]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	430a      	orrs	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	e02f      	b.n	8000da8 <HAL_RCC_OscConfig+0xe0>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d10c      	bne.n	8000d6a <HAL_RCC_OscConfig+0xa2>
 8000d50:	4bab      	ldr	r3, [pc, #684]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4baa      	ldr	r3, [pc, #680]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000d56:	49ab      	ldr	r1, [pc, #684]	; (8001004 <HAL_RCC_OscConfig+0x33c>)
 8000d58:	400a      	ands	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	4ba8      	ldr	r3, [pc, #672]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4ba7      	ldr	r3, [pc, #668]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000d62:	49a9      	ldr	r1, [pc, #676]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000d64:	400a      	ands	r2, r1
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	e01e      	b.n	8000da8 <HAL_RCC_OscConfig+0xe0>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b05      	cmp	r3, #5
 8000d70:	d10e      	bne.n	8000d90 <HAL_RCC_OscConfig+0xc8>
 8000d72:	4ba3      	ldr	r3, [pc, #652]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4ba2      	ldr	r3, [pc, #648]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	02c9      	lsls	r1, r1, #11
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	4b9f      	ldr	r3, [pc, #636]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b9e      	ldr	r3, [pc, #632]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000d86:	2180      	movs	r1, #128	; 0x80
 8000d88:	0249      	lsls	r1, r1, #9
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	e00b      	b.n	8000da8 <HAL_RCC_OscConfig+0xe0>
 8000d90:	4b9b      	ldr	r3, [pc, #620]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b9a      	ldr	r3, [pc, #616]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000d96:	499b      	ldr	r1, [pc, #620]	; (8001004 <HAL_RCC_OscConfig+0x33c>)
 8000d98:	400a      	ands	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	4b98      	ldr	r3, [pc, #608]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b97      	ldr	r3, [pc, #604]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000da2:	4999      	ldr	r1, [pc, #612]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000da4:	400a      	ands	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d014      	beq.n	8000dda <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fcf2 	bl	8000798 <HAL_GetTick>
 8000db4:	0003      	movs	r3, r0
 8000db6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db8:	e008      	b.n	8000dcc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dba:	f7ff fced 	bl	8000798 <HAL_GetTick>
 8000dbe:	0002      	movs	r2, r0
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	2b64      	cmp	r3, #100	; 0x64
 8000dc6:	d901      	bls.n	8000dcc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e2fd      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dcc:	4b8c      	ldr	r3, [pc, #560]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	029b      	lsls	r3, r3, #10
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	d0f0      	beq.n	8000dba <HAL_RCC_OscConfig+0xf2>
 8000dd8:	e015      	b.n	8000e06 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dda:	f7ff fcdd 	bl	8000798 <HAL_GetTick>
 8000dde:	0003      	movs	r3, r0
 8000de0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000de4:	f7ff fcd8 	bl	8000798 <HAL_GetTick>
 8000de8:	0002      	movs	r2, r0
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b64      	cmp	r3, #100	; 0x64
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e2e8      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df6:	4b82      	ldr	r3, [pc, #520]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	2380      	movs	r3, #128	; 0x80
 8000dfc:	029b      	lsls	r3, r3, #10
 8000dfe:	4013      	ands	r3, r2
 8000e00:	d1f0      	bne.n	8000de4 <HAL_RCC_OscConfig+0x11c>
 8000e02:	e000      	b.n	8000e06 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d100      	bne.n	8000e12 <HAL_RCC_OscConfig+0x14a>
 8000e10:	e06c      	b.n	8000eec <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e12:	4b7b      	ldr	r3, [pc, #492]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	220c      	movs	r2, #12
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d00e      	beq.n	8000e3a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e1c:	4b78      	ldr	r3, [pc, #480]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	220c      	movs	r2, #12
 8000e22:	4013      	ands	r3, r2
 8000e24:	2b08      	cmp	r3, #8
 8000e26:	d11f      	bne.n	8000e68 <HAL_RCC_OscConfig+0x1a0>
 8000e28:	4b75      	ldr	r3, [pc, #468]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	23c0      	movs	r3, #192	; 0xc0
 8000e2e:	025b      	lsls	r3, r3, #9
 8000e30:	401a      	ands	r2, r3
 8000e32:	2380      	movs	r3, #128	; 0x80
 8000e34:	021b      	lsls	r3, r3, #8
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d116      	bne.n	8000e68 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e3a:	4b71      	ldr	r3, [pc, #452]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2202      	movs	r2, #2
 8000e40:	4013      	ands	r3, r2
 8000e42:	d005      	beq.n	8000e50 <HAL_RCC_OscConfig+0x188>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d001      	beq.n	8000e50 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e2bb      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e50:	4b6b      	ldr	r3, [pc, #428]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	22f8      	movs	r2, #248	; 0xf8
 8000e56:	4393      	bics	r3, r2
 8000e58:	0019      	movs	r1, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	00da      	lsls	r2, r3, #3
 8000e60:	4b67      	ldr	r3, [pc, #412]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000e62:	430a      	orrs	r2, r1
 8000e64:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e66:	e041      	b.n	8000eec <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d024      	beq.n	8000eba <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e70:	4b63      	ldr	r3, [pc, #396]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b62      	ldr	r3, [pc, #392]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fc8c 	bl	8000798 <HAL_GetTick>
 8000e80:	0003      	movs	r3, r0
 8000e82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e84:	e008      	b.n	8000e98 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e86:	f7ff fc87 	bl	8000798 <HAL_GetTick>
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e297      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e98:	4b59      	ldr	r3, [pc, #356]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d0f1      	beq.n	8000e86 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea2:	4b57      	ldr	r3, [pc, #348]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	22f8      	movs	r2, #248	; 0xf8
 8000ea8:	4393      	bics	r3, r2
 8000eaa:	0019      	movs	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	00da      	lsls	r2, r3, #3
 8000eb2:	4b53      	ldr	r3, [pc, #332]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	e018      	b.n	8000eec <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eba:	4b51      	ldr	r3, [pc, #324]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4b50      	ldr	r3, [pc, #320]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	438a      	bics	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec6:	f7ff fc67 	bl	8000798 <HAL_GetTick>
 8000eca:	0003      	movs	r3, r0
 8000ecc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ed0:	f7ff fc62 	bl	8000798 <HAL_GetTick>
 8000ed4:	0002      	movs	r2, r0
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e272      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ee2:	4b47      	ldr	r3, [pc, #284]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d1f1      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2208      	movs	r2, #8
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d036      	beq.n	8000f64 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d019      	beq.n	8000f32 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000efe:	4b40      	ldr	r3, [pc, #256]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f02:	4b3f      	ldr	r3, [pc, #252]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000f04:	2101      	movs	r1, #1
 8000f06:	430a      	orrs	r2, r1
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f0a:	f7ff fc45 	bl	8000798 <HAL_GetTick>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f14:	f7ff fc40 	bl	8000798 <HAL_GetTick>
 8000f18:	0002      	movs	r2, r0
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e250      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f26:	4b36      	ldr	r3, [pc, #216]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d0f1      	beq.n	8000f14 <HAL_RCC_OscConfig+0x24c>
 8000f30:	e018      	b.n	8000f64 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f32:	4b33      	ldr	r3, [pc, #204]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f36:	4b32      	ldr	r3, [pc, #200]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000f38:	2101      	movs	r1, #1
 8000f3a:	438a      	bics	r2, r1
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f3e:	f7ff fc2b 	bl	8000798 <HAL_GetTick>
 8000f42:	0003      	movs	r3, r0
 8000f44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f46:	e008      	b.n	8000f5a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f48:	f7ff fc26 	bl	8000798 <HAL_GetTick>
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e236      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f5a:	4b29      	ldr	r3, [pc, #164]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5e:	2202      	movs	r2, #2
 8000f60:	4013      	ands	r3, r2
 8000f62:	d1f1      	bne.n	8000f48 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2204      	movs	r2, #4
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d100      	bne.n	8000f70 <HAL_RCC_OscConfig+0x2a8>
 8000f6e:	e0b5      	b.n	80010dc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f70:	231f      	movs	r3, #31
 8000f72:	18fb      	adds	r3, r7, r3
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f78:	4b21      	ldr	r3, [pc, #132]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000f7a:	69da      	ldr	r2, [r3, #28]
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	055b      	lsls	r3, r3, #21
 8000f80:	4013      	ands	r3, r2
 8000f82:	d111      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000f86:	69da      	ldr	r2, [r3, #28]
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000f8a:	2180      	movs	r1, #128	; 0x80
 8000f8c:	0549      	lsls	r1, r1, #21
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	61da      	str	r2, [r3, #28]
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000f94:	69da      	ldr	r2, [r3, #28]
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	055b      	lsls	r3, r3, #21
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fa0:	231f      	movs	r3, #31
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <HAL_RCC_OscConfig+0x344>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d11a      	bne.n	8000fea <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_RCC_OscConfig+0x344>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <HAL_RCC_OscConfig+0x344>)
 8000fba:	2180      	movs	r1, #128	; 0x80
 8000fbc:	0049      	lsls	r1, r1, #1
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fc2:	f7ff fbe9 	bl	8000798 <HAL_GetTick>
 8000fc6:	0003      	movs	r3, r0
 8000fc8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fcc:	f7ff fbe4 	bl	8000798 <HAL_GetTick>
 8000fd0:	0002      	movs	r2, r0
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b64      	cmp	r3, #100	; 0x64
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e1f4      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <HAL_RCC_OscConfig+0x344>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	2380      	movs	r3, #128	; 0x80
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	d0f0      	beq.n	8000fcc <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d10e      	bne.n	8001010 <HAL_RCC_OscConfig+0x348>
 8000ff2:	4b03      	ldr	r3, [pc, #12]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000ff4:	6a1a      	ldr	r2, [r3, #32]
 8000ff6:	4b02      	ldr	r3, [pc, #8]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	621a      	str	r2, [r3, #32]
 8000ffe:	e035      	b.n	800106c <HAL_RCC_OscConfig+0x3a4>
 8001000:	40021000 	.word	0x40021000
 8001004:	fffeffff 	.word	0xfffeffff
 8001008:	fffbffff 	.word	0xfffbffff
 800100c:	40007000 	.word	0x40007000
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d10c      	bne.n	8001032 <HAL_RCC_OscConfig+0x36a>
 8001018:	4bca      	ldr	r3, [pc, #808]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800101a:	6a1a      	ldr	r2, [r3, #32]
 800101c:	4bc9      	ldr	r3, [pc, #804]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800101e:	2101      	movs	r1, #1
 8001020:	438a      	bics	r2, r1
 8001022:	621a      	str	r2, [r3, #32]
 8001024:	4bc7      	ldr	r3, [pc, #796]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001026:	6a1a      	ldr	r2, [r3, #32]
 8001028:	4bc6      	ldr	r3, [pc, #792]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800102a:	2104      	movs	r1, #4
 800102c:	438a      	bics	r2, r1
 800102e:	621a      	str	r2, [r3, #32]
 8001030:	e01c      	b.n	800106c <HAL_RCC_OscConfig+0x3a4>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	2b05      	cmp	r3, #5
 8001038:	d10c      	bne.n	8001054 <HAL_RCC_OscConfig+0x38c>
 800103a:	4bc2      	ldr	r3, [pc, #776]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800103c:	6a1a      	ldr	r2, [r3, #32]
 800103e:	4bc1      	ldr	r3, [pc, #772]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001040:	2104      	movs	r1, #4
 8001042:	430a      	orrs	r2, r1
 8001044:	621a      	str	r2, [r3, #32]
 8001046:	4bbf      	ldr	r3, [pc, #764]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001048:	6a1a      	ldr	r2, [r3, #32]
 800104a:	4bbe      	ldr	r3, [pc, #760]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800104c:	2101      	movs	r1, #1
 800104e:	430a      	orrs	r2, r1
 8001050:	621a      	str	r2, [r3, #32]
 8001052:	e00b      	b.n	800106c <HAL_RCC_OscConfig+0x3a4>
 8001054:	4bbb      	ldr	r3, [pc, #748]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001056:	6a1a      	ldr	r2, [r3, #32]
 8001058:	4bba      	ldr	r3, [pc, #744]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800105a:	2101      	movs	r1, #1
 800105c:	438a      	bics	r2, r1
 800105e:	621a      	str	r2, [r3, #32]
 8001060:	4bb8      	ldr	r3, [pc, #736]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001062:	6a1a      	ldr	r2, [r3, #32]
 8001064:	4bb7      	ldr	r3, [pc, #732]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001066:	2104      	movs	r1, #4
 8001068:	438a      	bics	r2, r1
 800106a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d014      	beq.n	800109e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001074:	f7ff fb90 	bl	8000798 <HAL_GetTick>
 8001078:	0003      	movs	r3, r0
 800107a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800107c:	e009      	b.n	8001092 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800107e:	f7ff fb8b 	bl	8000798 <HAL_GetTick>
 8001082:	0002      	movs	r2, r0
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	4aaf      	ldr	r2, [pc, #700]	; (8001348 <HAL_RCC_OscConfig+0x680>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e19a      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001092:	4bac      	ldr	r3, [pc, #688]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	2202      	movs	r2, #2
 8001098:	4013      	ands	r3, r2
 800109a:	d0f0      	beq.n	800107e <HAL_RCC_OscConfig+0x3b6>
 800109c:	e013      	b.n	80010c6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109e:	f7ff fb7b 	bl	8000798 <HAL_GetTick>
 80010a2:	0003      	movs	r3, r0
 80010a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a6:	e009      	b.n	80010bc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a8:	f7ff fb76 	bl	8000798 <HAL_GetTick>
 80010ac:	0002      	movs	r2, r0
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	4aa5      	ldr	r2, [pc, #660]	; (8001348 <HAL_RCC_OscConfig+0x680>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e185      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010bc:	4ba1      	ldr	r3, [pc, #644]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	2202      	movs	r2, #2
 80010c2:	4013      	ands	r3, r2
 80010c4:	d1f0      	bne.n	80010a8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010c6:	231f      	movs	r3, #31
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d105      	bne.n	80010dc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010d0:	4b9c      	ldr	r3, [pc, #624]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80010d2:	69da      	ldr	r2, [r3, #28]
 80010d4:	4b9b      	ldr	r3, [pc, #620]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80010d6:	499d      	ldr	r1, [pc, #628]	; (800134c <HAL_RCC_OscConfig+0x684>)
 80010d8:	400a      	ands	r2, r1
 80010da:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2210      	movs	r2, #16
 80010e2:	4013      	ands	r3, r2
 80010e4:	d063      	beq.n	80011ae <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d12a      	bne.n	8001144 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010ee:	4b95      	ldr	r3, [pc, #596]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80010f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010f2:	4b94      	ldr	r3, [pc, #592]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80010f4:	2104      	movs	r1, #4
 80010f6:	430a      	orrs	r2, r1
 80010f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010fa:	4b92      	ldr	r3, [pc, #584]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80010fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010fe:	4b91      	ldr	r3, [pc, #580]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001100:	2101      	movs	r1, #1
 8001102:	430a      	orrs	r2, r1
 8001104:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001106:	f7ff fb47 	bl	8000798 <HAL_GetTick>
 800110a:	0003      	movs	r3, r0
 800110c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001110:	f7ff fb42 	bl	8000798 <HAL_GetTick>
 8001114:	0002      	movs	r2, r0
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e152      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001122:	4b88      	ldr	r3, [pc, #544]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001126:	2202      	movs	r2, #2
 8001128:	4013      	ands	r3, r2
 800112a:	d0f1      	beq.n	8001110 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800112c:	4b85      	ldr	r3, [pc, #532]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800112e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001130:	22f8      	movs	r2, #248	; 0xf8
 8001132:	4393      	bics	r3, r2
 8001134:	0019      	movs	r1, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	00da      	lsls	r2, r3, #3
 800113c:	4b81      	ldr	r3, [pc, #516]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800113e:	430a      	orrs	r2, r1
 8001140:	635a      	str	r2, [r3, #52]	; 0x34
 8001142:	e034      	b.n	80011ae <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	3305      	adds	r3, #5
 800114a:	d111      	bne.n	8001170 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800114c:	4b7d      	ldr	r3, [pc, #500]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800114e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001150:	4b7c      	ldr	r3, [pc, #496]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001152:	2104      	movs	r1, #4
 8001154:	438a      	bics	r2, r1
 8001156:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001158:	4b7a      	ldr	r3, [pc, #488]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800115a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800115c:	22f8      	movs	r2, #248	; 0xf8
 800115e:	4393      	bics	r3, r2
 8001160:	0019      	movs	r1, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	00da      	lsls	r2, r3, #3
 8001168:	4b76      	ldr	r3, [pc, #472]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800116a:	430a      	orrs	r2, r1
 800116c:	635a      	str	r2, [r3, #52]	; 0x34
 800116e:	e01e      	b.n	80011ae <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001170:	4b74      	ldr	r3, [pc, #464]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001174:	4b73      	ldr	r3, [pc, #460]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001176:	2104      	movs	r1, #4
 8001178:	430a      	orrs	r2, r1
 800117a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800117c:	4b71      	ldr	r3, [pc, #452]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800117e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001180:	4b70      	ldr	r3, [pc, #448]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001182:	2101      	movs	r1, #1
 8001184:	438a      	bics	r2, r1
 8001186:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001188:	f7ff fb06 	bl	8000798 <HAL_GetTick>
 800118c:	0003      	movs	r3, r0
 800118e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001192:	f7ff fb01 	bl	8000798 <HAL_GetTick>
 8001196:	0002      	movs	r2, r0
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e111      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011a4:	4b67      	ldr	r3, [pc, #412]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80011a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a8:	2202      	movs	r2, #2
 80011aa:	4013      	ands	r3, r2
 80011ac:	d1f1      	bne.n	8001192 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2220      	movs	r2, #32
 80011b4:	4013      	ands	r3, r2
 80011b6:	d05c      	beq.n	8001272 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80011b8:	4b62      	ldr	r3, [pc, #392]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	220c      	movs	r2, #12
 80011be:	4013      	ands	r3, r2
 80011c0:	2b0c      	cmp	r3, #12
 80011c2:	d00e      	beq.n	80011e2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011c4:	4b5f      	ldr	r3, [pc, #380]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	220c      	movs	r2, #12
 80011ca:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80011cc:	2b08      	cmp	r3, #8
 80011ce:	d114      	bne.n	80011fa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011d0:	4b5c      	ldr	r3, [pc, #368]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	23c0      	movs	r3, #192	; 0xc0
 80011d6:	025b      	lsls	r3, r3, #9
 80011d8:	401a      	ands	r2, r3
 80011da:	23c0      	movs	r3, #192	; 0xc0
 80011dc:	025b      	lsls	r3, r3, #9
 80011de:	429a      	cmp	r2, r3
 80011e0:	d10b      	bne.n	80011fa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011e2:	4b58      	ldr	r3, [pc, #352]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80011e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	025b      	lsls	r3, r3, #9
 80011ea:	4013      	ands	r3, r2
 80011ec:	d040      	beq.n	8001270 <HAL_RCC_OscConfig+0x5a8>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d03c      	beq.n	8001270 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e0e6      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d01b      	beq.n	800123a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001202:	4b50      	ldr	r3, [pc, #320]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001206:	4b4f      	ldr	r3, [pc, #316]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001208:	2180      	movs	r1, #128	; 0x80
 800120a:	0249      	lsls	r1, r1, #9
 800120c:	430a      	orrs	r2, r1
 800120e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fac2 	bl	8000798 <HAL_GetTick>
 8001214:	0003      	movs	r3, r0
 8001216:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800121a:	f7ff fabd 	bl	8000798 <HAL_GetTick>
 800121e:	0002      	movs	r2, r0
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e0cd      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800122c:	4b45      	ldr	r3, [pc, #276]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800122e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	025b      	lsls	r3, r3, #9
 8001234:	4013      	ands	r3, r2
 8001236:	d0f0      	beq.n	800121a <HAL_RCC_OscConfig+0x552>
 8001238:	e01b      	b.n	8001272 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800123a:	4b42      	ldr	r3, [pc, #264]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800123c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800123e:	4b41      	ldr	r3, [pc, #260]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001240:	4943      	ldr	r1, [pc, #268]	; (8001350 <HAL_RCC_OscConfig+0x688>)
 8001242:	400a      	ands	r2, r1
 8001244:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001246:	f7ff faa7 	bl	8000798 <HAL_GetTick>
 800124a:	0003      	movs	r3, r0
 800124c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001250:	f7ff faa2 	bl	8000798 <HAL_GetTick>
 8001254:	0002      	movs	r2, r0
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e0b2      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001262:	4b38      	ldr	r3, [pc, #224]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	4013      	ands	r3, r2
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0x588>
 800126e:	e000      	b.n	8001272 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001270:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	2b00      	cmp	r3, #0
 8001278:	d100      	bne.n	800127c <HAL_RCC_OscConfig+0x5b4>
 800127a:	e0a4      	b.n	80013c6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800127c:	4b31      	ldr	r3, [pc, #196]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	220c      	movs	r2, #12
 8001282:	4013      	ands	r3, r2
 8001284:	2b08      	cmp	r3, #8
 8001286:	d100      	bne.n	800128a <HAL_RCC_OscConfig+0x5c2>
 8001288:	e078      	b.n	800137c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	2b02      	cmp	r3, #2
 8001290:	d14c      	bne.n	800132c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001292:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001298:	492e      	ldr	r1, [pc, #184]	; (8001354 <HAL_RCC_OscConfig+0x68c>)
 800129a:	400a      	ands	r2, r1
 800129c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129e:	f7ff fa7b 	bl	8000798 <HAL_GetTick>
 80012a2:	0003      	movs	r3, r0
 80012a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a8:	f7ff fa76 	bl	8000798 <HAL_GetTick>
 80012ac:	0002      	movs	r2, r0
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e086      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ba:	4b22      	ldr	r3, [pc, #136]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	049b      	lsls	r3, r3, #18
 80012c2:	4013      	ands	r3, r2
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	220f      	movs	r2, #15
 80012cc:	4393      	bics	r3, r2
 80012ce:	0019      	movs	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80012d6:	430a      	orrs	r2, r1
 80012d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	4a1e      	ldr	r2, [pc, #120]	; (8001358 <HAL_RCC_OscConfig+0x690>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	0019      	movs	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	431a      	orrs	r2, r3
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80012f0:	430a      	orrs	r2, r1
 80012f2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80012fa:	2180      	movs	r1, #128	; 0x80
 80012fc:	0449      	lsls	r1, r1, #17
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001302:	f7ff fa49 	bl	8000798 <HAL_GetTick>
 8001306:	0003      	movs	r3, r0
 8001308:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800130c:	f7ff fa44 	bl	8000798 <HAL_GetTick>
 8001310:	0002      	movs	r2, r0
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e054      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	049b      	lsls	r3, r3, #18
 8001326:	4013      	ands	r3, r2
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x644>
 800132a:	e04c      	b.n	80013c6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <HAL_RCC_OscConfig+0x68c>)
 8001334:	400a      	ands	r2, r1
 8001336:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fa2e 	bl	8000798 <HAL_GetTick>
 800133c:	0003      	movs	r3, r0
 800133e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001340:	e015      	b.n	800136e <HAL_RCC_OscConfig+0x6a6>
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	40021000 	.word	0x40021000
 8001348:	00001388 	.word	0x00001388
 800134c:	efffffff 	.word	0xefffffff
 8001350:	fffeffff 	.word	0xfffeffff
 8001354:	feffffff 	.word	0xfeffffff
 8001358:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800135c:	f7ff fa1c 	bl	8000798 <HAL_GetTick>
 8001360:	0002      	movs	r2, r0
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e02c      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_RCC_OscConfig+0x708>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	049b      	lsls	r3, r3, #18
 8001376:	4013      	ands	r3, r2
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0x694>
 800137a:	e024      	b.n	80013c6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	2b01      	cmp	r3, #1
 8001382:	d101      	bne.n	8001388 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e01f      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_RCC_OscConfig+0x708>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_RCC_OscConfig+0x708>)
 8001390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001392:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	23c0      	movs	r3, #192	; 0xc0
 8001398:	025b      	lsls	r3, r3, #9
 800139a:	401a      	ands	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d10e      	bne.n	80013c2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	220f      	movs	r2, #15
 80013a8:	401a      	ands	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d107      	bne.n	80013c2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	23f0      	movs	r3, #240	; 0xf0
 80013b6:	039b      	lsls	r3, r3, #14
 80013b8:	401a      	ands	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013be:	429a      	cmp	r2, r3
 80013c0:	d001      	beq.n	80013c6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	0018      	movs	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b008      	add	sp, #32
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021000 	.word	0x40021000

080013d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0bf      	b.n	8001568 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e8:	4b61      	ldr	r3, [pc, #388]	; (8001570 <HAL_RCC_ClockConfig+0x19c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2201      	movs	r2, #1
 80013ee:	4013      	ands	r3, r2
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d911      	bls.n	800141a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f6:	4b5e      	ldr	r3, [pc, #376]	; (8001570 <HAL_RCC_ClockConfig+0x19c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2201      	movs	r2, #1
 80013fc:	4393      	bics	r3, r2
 80013fe:	0019      	movs	r1, r3
 8001400:	4b5b      	ldr	r3, [pc, #364]	; (8001570 <HAL_RCC_ClockConfig+0x19c>)
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001408:	4b59      	ldr	r3, [pc, #356]	; (8001570 <HAL_RCC_ClockConfig+0x19c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2201      	movs	r2, #1
 800140e:	4013      	ands	r3, r2
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d001      	beq.n	800141a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e0a6      	b.n	8001568 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2202      	movs	r2, #2
 8001420:	4013      	ands	r3, r2
 8001422:	d015      	beq.n	8001450 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2204      	movs	r2, #4
 800142a:	4013      	ands	r3, r2
 800142c:	d006      	beq.n	800143c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800142e:	4b51      	ldr	r3, [pc, #324]	; (8001574 <HAL_RCC_ClockConfig+0x1a0>)
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	4b50      	ldr	r3, [pc, #320]	; (8001574 <HAL_RCC_ClockConfig+0x1a0>)
 8001434:	21e0      	movs	r1, #224	; 0xe0
 8001436:	00c9      	lsls	r1, r1, #3
 8001438:	430a      	orrs	r2, r1
 800143a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800143c:	4b4d      	ldr	r3, [pc, #308]	; (8001574 <HAL_RCC_ClockConfig+0x1a0>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	22f0      	movs	r2, #240	; 0xf0
 8001442:	4393      	bics	r3, r2
 8001444:	0019      	movs	r1, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	4b4a      	ldr	r3, [pc, #296]	; (8001574 <HAL_RCC_ClockConfig+0x1a0>)
 800144c:	430a      	orrs	r2, r1
 800144e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2201      	movs	r2, #1
 8001456:	4013      	ands	r3, r2
 8001458:	d04c      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d107      	bne.n	8001472 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001462:	4b44      	ldr	r3, [pc, #272]	; (8001574 <HAL_RCC_ClockConfig+0x1a0>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	029b      	lsls	r3, r3, #10
 800146a:	4013      	ands	r3, r2
 800146c:	d120      	bne.n	80014b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e07a      	b.n	8001568 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d107      	bne.n	800148a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147a:	4b3e      	ldr	r3, [pc, #248]	; (8001574 <HAL_RCC_ClockConfig+0x1a0>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	049b      	lsls	r3, r3, #18
 8001482:	4013      	ands	r3, r2
 8001484:	d114      	bne.n	80014b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e06e      	b.n	8001568 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b03      	cmp	r3, #3
 8001490:	d107      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <HAL_RCC_ClockConfig+0x1a0>)
 8001494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	025b      	lsls	r3, r3, #9
 800149a:	4013      	ands	r3, r2
 800149c:	d108      	bne.n	80014b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e062      	b.n	8001568 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a2:	4b34      	ldr	r3, [pc, #208]	; (8001574 <HAL_RCC_ClockConfig+0x1a0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2202      	movs	r2, #2
 80014a8:	4013      	ands	r3, r2
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e05b      	b.n	8001568 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b0:	4b30      	ldr	r3, [pc, #192]	; (8001574 <HAL_RCC_ClockConfig+0x1a0>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2203      	movs	r2, #3
 80014b6:	4393      	bics	r3, r2
 80014b8:	0019      	movs	r1, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_RCC_ClockConfig+0x1a0>)
 80014c0:	430a      	orrs	r2, r1
 80014c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c4:	f7ff f968 	bl	8000798 <HAL_GetTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014cc:	e009      	b.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ce:	f7ff f963 	bl	8000798 <HAL_GetTick>
 80014d2:	0002      	movs	r2, r0
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	4a27      	ldr	r2, [pc, #156]	; (8001578 <HAL_RCC_ClockConfig+0x1a4>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e042      	b.n	8001568 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e2:	4b24      	ldr	r3, [pc, #144]	; (8001574 <HAL_RCC_ClockConfig+0x1a0>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	220c      	movs	r2, #12
 80014e8:	401a      	ands	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d1ec      	bne.n	80014ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_RCC_ClockConfig+0x19c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2201      	movs	r2, #1
 80014fa:	4013      	ands	r3, r2
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d211      	bcs.n	8001526 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_RCC_ClockConfig+0x19c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2201      	movs	r2, #1
 8001508:	4393      	bics	r3, r2
 800150a:	0019      	movs	r1, r3
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_RCC_ClockConfig+0x19c>)
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <HAL_RCC_ClockConfig+0x19c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2201      	movs	r2, #1
 800151a:	4013      	ands	r3, r2
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d001      	beq.n	8001526 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e020      	b.n	8001568 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2204      	movs	r2, #4
 800152c:	4013      	ands	r3, r2
 800152e:	d009      	beq.n	8001544 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001530:	4b10      	ldr	r3, [pc, #64]	; (8001574 <HAL_RCC_ClockConfig+0x1a0>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	4a11      	ldr	r2, [pc, #68]	; (800157c <HAL_RCC_ClockConfig+0x1a8>)
 8001536:	4013      	ands	r3, r2
 8001538:	0019      	movs	r1, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_RCC_ClockConfig+0x1a0>)
 8001540:	430a      	orrs	r2, r1
 8001542:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001544:	f000 f820 	bl	8001588 <HAL_RCC_GetSysClockFreq>
 8001548:	0001      	movs	r1, r0
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_RCC_ClockConfig+0x1a0>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	091b      	lsrs	r3, r3, #4
 8001550:	220f      	movs	r2, #15
 8001552:	4013      	ands	r3, r2
 8001554:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <HAL_RCC_ClockConfig+0x1ac>)
 8001556:	5cd3      	ldrb	r3, [r2, r3]
 8001558:	000a      	movs	r2, r1
 800155a:	40da      	lsrs	r2, r3
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_RCC_ClockConfig+0x1b0>)
 800155e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff f8d3 	bl	800070c <HAL_InitTick>
  
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	0018      	movs	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	b004      	add	sp, #16
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40022000 	.word	0x40022000
 8001574:	40021000 	.word	0x40021000
 8001578:	00001388 	.word	0x00001388
 800157c:	fffff8ff 	.word	0xfffff8ff
 8001580:	0800246c 	.word	0x0800246c
 8001584:	20000000 	.word	0x20000000

08001588 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b08f      	sub	sp, #60	; 0x3c
 800158c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800158e:	2314      	movs	r3, #20
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	4a37      	ldr	r2, [pc, #220]	; (8001670 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001594:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001596:	c313      	stmia	r3!, {r0, r1, r4}
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4a35      	ldr	r2, [pc, #212]	; (8001674 <HAL_RCC_GetSysClockFreq+0xec>)
 80015a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015a2:	c313      	stmia	r3!, {r0, r1, r4}
 80015a4:	6812      	ldr	r2, [r2, #0]
 80015a6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80015b0:	2300      	movs	r3, #0
 80015b2:	637b      	str	r3, [r7, #52]	; 0x34
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80015bc:	4b2e      	ldr	r3, [pc, #184]	; (8001678 <HAL_RCC_GetSysClockFreq+0xf0>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c4:	220c      	movs	r2, #12
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d006      	beq.n	80015da <HAL_RCC_GetSysClockFreq+0x52>
 80015cc:	2b0c      	cmp	r3, #12
 80015ce:	d043      	beq.n	8001658 <HAL_RCC_GetSysClockFreq+0xd0>
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d144      	bne.n	800165e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015d4:	4b29      	ldr	r3, [pc, #164]	; (800167c <HAL_RCC_GetSysClockFreq+0xf4>)
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015d8:	e044      	b.n	8001664 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80015da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015dc:	0c9b      	lsrs	r3, r3, #18
 80015de:	220f      	movs	r2, #15
 80015e0:	4013      	ands	r3, r2
 80015e2:	2214      	movs	r2, #20
 80015e4:	18ba      	adds	r2, r7, r2
 80015e6:	5cd3      	ldrb	r3, [r2, r3]
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015ea:	4b23      	ldr	r3, [pc, #140]	; (8001678 <HAL_RCC_GetSysClockFreq+0xf0>)
 80015ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ee:	220f      	movs	r2, #15
 80015f0:	4013      	ands	r3, r2
 80015f2:	1d3a      	adds	r2, r7, #4
 80015f4:	5cd3      	ldrb	r3, [r2, r3]
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015fa:	23c0      	movs	r3, #192	; 0xc0
 80015fc:	025b      	lsls	r3, r3, #9
 80015fe:	401a      	ands	r2, r3
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	025b      	lsls	r3, r3, #9
 8001604:	429a      	cmp	r2, r3
 8001606:	d109      	bne.n	800161c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800160a:	481c      	ldr	r0, [pc, #112]	; (800167c <HAL_RCC_GetSysClockFreq+0xf4>)
 800160c:	f7fe fd7c 	bl	8000108 <__udivsi3>
 8001610:	0003      	movs	r3, r0
 8001612:	001a      	movs	r2, r3
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	4353      	muls	r3, r2
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
 800161a:	e01a      	b.n	8001652 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800161c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800161e:	23c0      	movs	r3, #192	; 0xc0
 8001620:	025b      	lsls	r3, r3, #9
 8001622:	401a      	ands	r2, r3
 8001624:	23c0      	movs	r3, #192	; 0xc0
 8001626:	025b      	lsls	r3, r3, #9
 8001628:	429a      	cmp	r2, r3
 800162a:	d109      	bne.n	8001640 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800162c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800162e:	4814      	ldr	r0, [pc, #80]	; (8001680 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001630:	f7fe fd6a 	bl	8000108 <__udivsi3>
 8001634:	0003      	movs	r3, r0
 8001636:	001a      	movs	r2, r3
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	4353      	muls	r3, r2
 800163c:	637b      	str	r3, [r7, #52]	; 0x34
 800163e:	e008      	b.n	8001652 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001642:	480e      	ldr	r0, [pc, #56]	; (800167c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001644:	f7fe fd60 	bl	8000108 <__udivsi3>
 8001648:	0003      	movs	r3, r0
 800164a:	001a      	movs	r2, r3
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	4353      	muls	r3, r2
 8001650:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001654:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001656:	e005      	b.n	8001664 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_RCC_GetSysClockFreq+0xf8>)
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800165c:	e002      	b.n	8001664 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001660:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001662:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001666:	0018      	movs	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	b00f      	add	sp, #60	; 0x3c
 800166c:	bd90      	pop	{r4, r7, pc}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	0800244c 	.word	0x0800244c
 8001674:	0800245c 	.word	0x0800245c
 8001678:	40021000 	.word	0x40021000
 800167c:	007a1200 	.word	0x007a1200
 8001680:	02dc6c00 	.word	0x02dc6c00

08001684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	223d      	movs	r2, #61	; 0x3d
 8001690:	5c9b      	ldrb	r3, [r3, r2]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b01      	cmp	r3, #1
 8001696:	d001      	beq.n	800169c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e03b      	b.n	8001714 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	223d      	movs	r2, #61	; 0x3d
 80016a0:	2102      	movs	r1, #2
 80016a2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2101      	movs	r1, #1
 80016b0:	430a      	orrs	r2, r1
 80016b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a18      	ldr	r2, [pc, #96]	; (800171c <HAL_TIM_Base_Start_IT+0x98>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d00f      	beq.n	80016de <HAL_TIM_Base_Start_IT+0x5a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	05db      	lsls	r3, r3, #23
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d009      	beq.n	80016de <HAL_TIM_Base_Start_IT+0x5a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a14      	ldr	r2, [pc, #80]	; (8001720 <HAL_TIM_Base_Start_IT+0x9c>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d004      	beq.n	80016de <HAL_TIM_Base_Start_IT+0x5a>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a12      	ldr	r2, [pc, #72]	; (8001724 <HAL_TIM_Base_Start_IT+0xa0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d111      	bne.n	8001702 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2207      	movs	r2, #7
 80016e6:	4013      	ands	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b06      	cmp	r3, #6
 80016ee:	d010      	beq.n	8001712 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2101      	movs	r1, #1
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001700:	e007      	b.n	8001712 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2101      	movs	r1, #1
 800170e:	430a      	orrs	r2, r1
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	0018      	movs	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	b004      	add	sp, #16
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40012c00 	.word	0x40012c00
 8001720:	40000400 	.word	0x40000400
 8001724:	40014000 	.word	0x40014000

08001728 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e042      	b.n	80017c0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	223d      	movs	r2, #61	; 0x3d
 800173e:	5c9b      	ldrb	r3, [r3, r2]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d107      	bne.n	8001756 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	223c      	movs	r2, #60	; 0x3c
 800174a:	2100      	movs	r1, #0
 800174c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	0018      	movs	r0, r3
 8001752:	f7fe ff0b 	bl	800056c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	223d      	movs	r2, #61	; 0x3d
 800175a:	2102      	movs	r1, #2
 800175c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3304      	adds	r3, #4
 8001766:	0019      	movs	r1, r3
 8001768:	0010      	movs	r0, r2
 800176a:	f000 facb 	bl	8001d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2246      	movs	r2, #70	; 0x46
 8001772:	2101      	movs	r1, #1
 8001774:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	223e      	movs	r2, #62	; 0x3e
 800177a:	2101      	movs	r1, #1
 800177c:	5499      	strb	r1, [r3, r2]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	223f      	movs	r2, #63	; 0x3f
 8001782:	2101      	movs	r1, #1
 8001784:	5499      	strb	r1, [r3, r2]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2240      	movs	r2, #64	; 0x40
 800178a:	2101      	movs	r1, #1
 800178c:	5499      	strb	r1, [r3, r2]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2241      	movs	r2, #65	; 0x41
 8001792:	2101      	movs	r1, #1
 8001794:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2242      	movs	r2, #66	; 0x42
 800179a:	2101      	movs	r1, #1
 800179c:	5499      	strb	r1, [r3, r2]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2243      	movs	r2, #67	; 0x43
 80017a2:	2101      	movs	r1, #1
 80017a4:	5499      	strb	r1, [r3, r2]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2244      	movs	r2, #68	; 0x44
 80017aa:	2101      	movs	r1, #1
 80017ac:	5499      	strb	r1, [r3, r2]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2245      	movs	r2, #69	; 0x45
 80017b2:	2101      	movs	r1, #1
 80017b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	223d      	movs	r2, #61	; 0x3d
 80017ba:	2101      	movs	r1, #1
 80017bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b002      	add	sp, #8
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d108      	bne.n	80017ea <HAL_TIM_PWM_Start+0x22>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	223e      	movs	r2, #62	; 0x3e
 80017dc:	5c9b      	ldrb	r3, [r3, r2]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	3b01      	subs	r3, #1
 80017e2:	1e5a      	subs	r2, r3, #1
 80017e4:	4193      	sbcs	r3, r2
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	e01f      	b.n	800182a <HAL_TIM_PWM_Start+0x62>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d108      	bne.n	8001802 <HAL_TIM_PWM_Start+0x3a>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	223f      	movs	r2, #63	; 0x3f
 80017f4:	5c9b      	ldrb	r3, [r3, r2]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	3b01      	subs	r3, #1
 80017fa:	1e5a      	subs	r2, r3, #1
 80017fc:	4193      	sbcs	r3, r2
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	e013      	b.n	800182a <HAL_TIM_PWM_Start+0x62>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2b08      	cmp	r3, #8
 8001806:	d108      	bne.n	800181a <HAL_TIM_PWM_Start+0x52>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2240      	movs	r2, #64	; 0x40
 800180c:	5c9b      	ldrb	r3, [r3, r2]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	3b01      	subs	r3, #1
 8001812:	1e5a      	subs	r2, r3, #1
 8001814:	4193      	sbcs	r3, r2
 8001816:	b2db      	uxtb	r3, r3
 8001818:	e007      	b.n	800182a <HAL_TIM_PWM_Start+0x62>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2241      	movs	r2, #65	; 0x41
 800181e:	5c9b      	ldrb	r3, [r3, r2]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	3b01      	subs	r3, #1
 8001824:	1e5a      	subs	r2, r3, #1
 8001826:	4193      	sbcs	r3, r2
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e074      	b.n	800191c <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d104      	bne.n	8001842 <HAL_TIM_PWM_Start+0x7a>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	223e      	movs	r2, #62	; 0x3e
 800183c:	2102      	movs	r1, #2
 800183e:	5499      	strb	r1, [r3, r2]
 8001840:	e013      	b.n	800186a <HAL_TIM_PWM_Start+0xa2>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	2b04      	cmp	r3, #4
 8001846:	d104      	bne.n	8001852 <HAL_TIM_PWM_Start+0x8a>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	223f      	movs	r2, #63	; 0x3f
 800184c:	2102      	movs	r1, #2
 800184e:	5499      	strb	r1, [r3, r2]
 8001850:	e00b      	b.n	800186a <HAL_TIM_PWM_Start+0xa2>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	2b08      	cmp	r3, #8
 8001856:	d104      	bne.n	8001862 <HAL_TIM_PWM_Start+0x9a>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2240      	movs	r2, #64	; 0x40
 800185c:	2102      	movs	r1, #2
 800185e:	5499      	strb	r1, [r3, r2]
 8001860:	e003      	b.n	800186a <HAL_TIM_PWM_Start+0xa2>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2241      	movs	r2, #65	; 0x41
 8001866:	2102      	movs	r1, #2
 8001868:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6839      	ldr	r1, [r7, #0]
 8001870:	2201      	movs	r2, #1
 8001872:	0018      	movs	r0, r3
 8001874:	f000 fcc2 	bl	80021fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a29      	ldr	r2, [pc, #164]	; (8001924 <HAL_TIM_PWM_Start+0x15c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d00e      	beq.n	80018a0 <HAL_TIM_PWM_Start+0xd8>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a28      	ldr	r2, [pc, #160]	; (8001928 <HAL_TIM_PWM_Start+0x160>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d009      	beq.n	80018a0 <HAL_TIM_PWM_Start+0xd8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a26      	ldr	r2, [pc, #152]	; (800192c <HAL_TIM_PWM_Start+0x164>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d004      	beq.n	80018a0 <HAL_TIM_PWM_Start+0xd8>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a25      	ldr	r2, [pc, #148]	; (8001930 <HAL_TIM_PWM_Start+0x168>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d101      	bne.n	80018a4 <HAL_TIM_PWM_Start+0xdc>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_TIM_PWM_Start+0xde>
 80018a4:	2300      	movs	r3, #0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	0209      	lsls	r1, r1, #8
 80018b8:	430a      	orrs	r2, r1
 80018ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a18      	ldr	r2, [pc, #96]	; (8001924 <HAL_TIM_PWM_Start+0x15c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d00f      	beq.n	80018e6 <HAL_TIM_PWM_Start+0x11e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	05db      	lsls	r3, r3, #23
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d009      	beq.n	80018e6 <HAL_TIM_PWM_Start+0x11e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a17      	ldr	r2, [pc, #92]	; (8001934 <HAL_TIM_PWM_Start+0x16c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d004      	beq.n	80018e6 <HAL_TIM_PWM_Start+0x11e>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a11      	ldr	r2, [pc, #68]	; (8001928 <HAL_TIM_PWM_Start+0x160>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d111      	bne.n	800190a <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2207      	movs	r2, #7
 80018ee:	4013      	ands	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b06      	cmp	r3, #6
 80018f6:	d010      	beq.n	800191a <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2101      	movs	r1, #1
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001908:	e007      	b.n	800191a <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2101      	movs	r1, #1
 8001916:	430a      	orrs	r2, r1
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	0018      	movs	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	b004      	add	sp, #16
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40012c00 	.word	0x40012c00
 8001928:	40014000 	.word	0x40014000
 800192c:	40014400 	.word	0x40014400
 8001930:	40014800 	.word	0x40014800
 8001934:	40000400 	.word	0x40000400

08001938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	2202      	movs	r2, #2
 8001948:	4013      	ands	r3, r2
 800194a:	2b02      	cmp	r3, #2
 800194c:	d124      	bne.n	8001998 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	2202      	movs	r2, #2
 8001956:	4013      	ands	r3, r2
 8001958:	2b02      	cmp	r3, #2
 800195a:	d11d      	bne.n	8001998 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2203      	movs	r2, #3
 8001962:	4252      	negs	r2, r2
 8001964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	2203      	movs	r2, #3
 8001974:	4013      	ands	r3, r2
 8001976:	d004      	beq.n	8001982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	0018      	movs	r0, r3
 800197c:	f000 f9aa 	bl	8001cd4 <HAL_TIM_IC_CaptureCallback>
 8001980:	e007      	b.n	8001992 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	0018      	movs	r0, r3
 8001986:	f000 f99d 	bl	8001cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	0018      	movs	r0, r3
 800198e:	f000 f9a9 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	2204      	movs	r2, #4
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d125      	bne.n	80019f2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2204      	movs	r2, #4
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d11e      	bne.n	80019f2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2205      	movs	r2, #5
 80019ba:	4252      	negs	r2, r2
 80019bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2202      	movs	r2, #2
 80019c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699a      	ldr	r2, [r3, #24]
 80019ca:	23c0      	movs	r3, #192	; 0xc0
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4013      	ands	r3, r2
 80019d0:	d004      	beq.n	80019dc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	0018      	movs	r0, r3
 80019d6:	f000 f97d 	bl	8001cd4 <HAL_TIM_IC_CaptureCallback>
 80019da:	e007      	b.n	80019ec <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	0018      	movs	r0, r3
 80019e0:	f000 f970 	bl	8001cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	0018      	movs	r0, r3
 80019e8:	f000 f97c 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	2208      	movs	r2, #8
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d124      	bne.n	8001a4a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2208      	movs	r2, #8
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d11d      	bne.n	8001a4a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2209      	movs	r2, #9
 8001a14:	4252      	negs	r2, r2
 8001a16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	2203      	movs	r2, #3
 8001a26:	4013      	ands	r3, r2
 8001a28:	d004      	beq.n	8001a34 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f000 f951 	bl	8001cd4 <HAL_TIM_IC_CaptureCallback>
 8001a32:	e007      	b.n	8001a44 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	0018      	movs	r0, r3
 8001a38:	f000 f944 	bl	8001cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 f950 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	2210      	movs	r2, #16
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b10      	cmp	r3, #16
 8001a56:	d125      	bne.n	8001aa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2210      	movs	r2, #16
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b10      	cmp	r3, #16
 8001a64:	d11e      	bne.n	8001aa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2211      	movs	r2, #17
 8001a6c:	4252      	negs	r2, r2
 8001a6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2208      	movs	r2, #8
 8001a74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	69da      	ldr	r2, [r3, #28]
 8001a7c:	23c0      	movs	r3, #192	; 0xc0
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4013      	ands	r3, r2
 8001a82:	d004      	beq.n	8001a8e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	0018      	movs	r0, r3
 8001a88:	f000 f924 	bl	8001cd4 <HAL_TIM_IC_CaptureCallback>
 8001a8c:	e007      	b.n	8001a9e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f000 f917 	bl	8001cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f000 f923 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d10f      	bne.n	8001ad2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d108      	bne.n	8001ad2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	4252      	negs	r2, r2
 8001ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f7fe fd01 	bl	80004d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b80      	cmp	r3, #128	; 0x80
 8001ade:	d10f      	bne.n	8001b00 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	2280      	movs	r2, #128	; 0x80
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b80      	cmp	r3, #128	; 0x80
 8001aec:	d108      	bne.n	8001b00 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2281      	movs	r2, #129	; 0x81
 8001af4:	4252      	negs	r2, r2
 8001af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	0018      	movs	r0, r3
 8001afc:	f000 fc66 	bl	80023cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	2240      	movs	r2, #64	; 0x40
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b40      	cmp	r3, #64	; 0x40
 8001b0c:	d10f      	bne.n	8001b2e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2240      	movs	r2, #64	; 0x40
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b40      	cmp	r3, #64	; 0x40
 8001b1a:	d108      	bne.n	8001b2e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2241      	movs	r2, #65	; 0x41
 8001b22:	4252      	negs	r2, r2
 8001b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f000 f8e3 	bl	8001cf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	2220      	movs	r2, #32
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b20      	cmp	r3, #32
 8001b3a:	d10f      	bne.n	8001b5c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2220      	movs	r2, #32
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b20      	cmp	r3, #32
 8001b48:	d108      	bne.n	8001b5c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2221      	movs	r2, #33	; 0x21
 8001b50:	4252      	negs	r2, r2
 8001b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 fc30 	bl	80023bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b5c:	46c0      	nop			; (mov r8, r8)
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b002      	add	sp, #8
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	223c      	movs	r2, #60	; 0x3c
 8001b74:	5c9b      	ldrb	r3, [r3, r2]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e09c      	b.n	8001cb8 <HAL_TIM_PWM_ConfigChannel+0x154>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	223c      	movs	r2, #60	; 0x3c
 8001b82:	2101      	movs	r1, #1
 8001b84:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d029      	beq.n	8001be0 <HAL_TIM_PWM_ConfigChannel+0x7c>
 8001b8c:	d802      	bhi.n	8001b94 <HAL_TIM_PWM_ConfigChannel+0x30>
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <HAL_TIM_PWM_ConfigChannel+0x3a>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8001b92:	e08c      	b.n	8001cae <HAL_TIM_PWM_ConfigChannel+0x14a>
  switch (Channel)
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d046      	beq.n	8001c26 <HAL_TIM_PWM_ConfigChannel+0xc2>
 8001b98:	2b0c      	cmp	r3, #12
 8001b9a:	d065      	beq.n	8001c68 <HAL_TIM_PWM_ConfigChannel+0x104>
      break;
 8001b9c:	e087      	b.n	8001cae <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	0011      	movs	r1, r2
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f000 f92c 	bl	8001e04 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	699a      	ldr	r2, [r3, #24]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2108      	movs	r1, #8
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699a      	ldr	r2, [r3, #24]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2104      	movs	r1, #4
 8001bc8:	438a      	bics	r2, r1
 8001bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6999      	ldr	r1, [r3, #24]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	619a      	str	r2, [r3, #24]
      break;
 8001bde:	e066      	b.n	8001cae <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	0011      	movs	r1, r2
 8001be8:	0018      	movs	r0, r3
 8001bea:	f000 f993 	bl	8001f14 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	699a      	ldr	r2, [r3, #24]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2180      	movs	r1, #128	; 0x80
 8001bfa:	0109      	lsls	r1, r1, #4
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699a      	ldr	r2, [r3, #24]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	492d      	ldr	r1, [pc, #180]	; (8001cc0 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6999      	ldr	r1, [r3, #24]
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	021a      	lsls	r2, r3, #8
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	619a      	str	r2, [r3, #24]
      break;
 8001c24:	e043      	b.n	8001cae <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	0011      	movs	r1, r2
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f000 f9f4 	bl	800201c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	69da      	ldr	r2, [r3, #28]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2108      	movs	r1, #8
 8001c40:	430a      	orrs	r2, r1
 8001c42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	69da      	ldr	r2, [r3, #28]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2104      	movs	r1, #4
 8001c50:	438a      	bics	r2, r1
 8001c52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	69d9      	ldr	r1, [r3, #28]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	61da      	str	r2, [r3, #28]
      break;
 8001c66:	e022      	b.n	8001cae <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	0011      	movs	r1, r2
 8001c70:	0018      	movs	r0, r3
 8001c72:	f000 fa59 	bl	8002128 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	69da      	ldr	r2, [r3, #28]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2180      	movs	r1, #128	; 0x80
 8001c82:	0109      	lsls	r1, r1, #4
 8001c84:	430a      	orrs	r2, r1
 8001c86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69da      	ldr	r2, [r3, #28]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	490b      	ldr	r1, [pc, #44]	; (8001cc0 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8001c94:	400a      	ands	r2, r1
 8001c96:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	69d9      	ldr	r1, [r3, #28]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	021a      	lsls	r2, r3, #8
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	61da      	str	r2, [r3, #28]
      break;
 8001cac:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	223c      	movs	r2, #60	; 0x3c
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	0018      	movs	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b004      	add	sp, #16
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	fffffbff 	.word	0xfffffbff

08001cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ccc:	46c0      	nop			; (mov r8, r8)
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b002      	add	sp, #8
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cdc:	46c0      	nop			; (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b002      	add	sp, #8
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cec:	46c0      	nop			; (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cfc:	46c0      	nop			; (mov r8, r8)
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	b002      	add	sp, #8
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a34      	ldr	r2, [pc, #208]	; (8001de8 <TIM_Base_SetConfig+0xe4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d008      	beq.n	8001d2e <TIM_Base_SetConfig+0x2a>
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	05db      	lsls	r3, r3, #23
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d003      	beq.n	8001d2e <TIM_Base_SetConfig+0x2a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a30      	ldr	r2, [pc, #192]	; (8001dec <TIM_Base_SetConfig+0xe8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d108      	bne.n	8001d40 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2270      	movs	r2, #112	; 0x70
 8001d32:	4393      	bics	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a29      	ldr	r2, [pc, #164]	; (8001de8 <TIM_Base_SetConfig+0xe4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d018      	beq.n	8001d7a <TIM_Base_SetConfig+0x76>
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	05db      	lsls	r3, r3, #23
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d013      	beq.n	8001d7a <TIM_Base_SetConfig+0x76>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a25      	ldr	r2, [pc, #148]	; (8001dec <TIM_Base_SetConfig+0xe8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00f      	beq.n	8001d7a <TIM_Base_SetConfig+0x76>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a24      	ldr	r2, [pc, #144]	; (8001df0 <TIM_Base_SetConfig+0xec>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00b      	beq.n	8001d7a <TIM_Base_SetConfig+0x76>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <TIM_Base_SetConfig+0xf0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d007      	beq.n	8001d7a <TIM_Base_SetConfig+0x76>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a22      	ldr	r2, [pc, #136]	; (8001df8 <TIM_Base_SetConfig+0xf4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d003      	beq.n	8001d7a <TIM_Base_SetConfig+0x76>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a21      	ldr	r2, [pc, #132]	; (8001dfc <TIM_Base_SetConfig+0xf8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d108      	bne.n	8001d8c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4a20      	ldr	r2, [pc, #128]	; (8001e00 <TIM_Base_SetConfig+0xfc>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2280      	movs	r2, #128	; 0x80
 8001d90:	4393      	bics	r3, r2
 8001d92:	001a      	movs	r2, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a0c      	ldr	r2, [pc, #48]	; (8001de8 <TIM_Base_SetConfig+0xe4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00b      	beq.n	8001dd2 <TIM_Base_SetConfig+0xce>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <TIM_Base_SetConfig+0xf0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d007      	beq.n	8001dd2 <TIM_Base_SetConfig+0xce>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <TIM_Base_SetConfig+0xf4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d003      	beq.n	8001dd2 <TIM_Base_SetConfig+0xce>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <TIM_Base_SetConfig+0xf8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d103      	bne.n	8001dda <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	615a      	str	r2, [r3, #20]
}
 8001de0:	46c0      	nop			; (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b004      	add	sp, #16
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40012c00 	.word	0x40012c00
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40002000 	.word	0x40002000
 8001df4:	40014000 	.word	0x40014000
 8001df8:	40014400 	.word	0x40014400
 8001dfc:	40014800 	.word	0x40014800
 8001e00:	fffffcff 	.word	0xfffffcff

08001e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	2201      	movs	r2, #1
 8001e14:	4393      	bics	r3, r2
 8001e16:	001a      	movs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2270      	movs	r2, #112	; 0x70
 8001e32:	4393      	bics	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2203      	movs	r2, #3
 8001e3a:	4393      	bics	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	4393      	bics	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a27      	ldr	r2, [pc, #156]	; (8001efc <TIM_OC1_SetConfig+0xf8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00b      	beq.n	8001e7a <TIM_OC1_SetConfig+0x76>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a26      	ldr	r2, [pc, #152]	; (8001f00 <TIM_OC1_SetConfig+0xfc>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <TIM_OC1_SetConfig+0x76>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a25      	ldr	r2, [pc, #148]	; (8001f04 <TIM_OC1_SetConfig+0x100>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d003      	beq.n	8001e7a <TIM_OC1_SetConfig+0x76>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a24      	ldr	r2, [pc, #144]	; (8001f08 <TIM_OC1_SetConfig+0x104>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d10c      	bne.n	8001e94 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	4393      	bics	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2204      	movs	r2, #4
 8001e90:	4393      	bics	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a19      	ldr	r2, [pc, #100]	; (8001efc <TIM_OC1_SetConfig+0xf8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00b      	beq.n	8001eb4 <TIM_OC1_SetConfig+0xb0>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <TIM_OC1_SetConfig+0xfc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d007      	beq.n	8001eb4 <TIM_OC1_SetConfig+0xb0>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <TIM_OC1_SetConfig+0x100>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d003      	beq.n	8001eb4 <TIM_OC1_SetConfig+0xb0>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a16      	ldr	r2, [pc, #88]	; (8001f08 <TIM_OC1_SetConfig+0x104>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d111      	bne.n	8001ed8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <TIM_OC1_SetConfig+0x108>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <TIM_OC1_SetConfig+0x10c>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	621a      	str	r2, [r3, #32]
}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b006      	add	sp, #24
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	40012c00 	.word	0x40012c00
 8001f00:	40014000 	.word	0x40014000
 8001f04:	40014400 	.word	0x40014400
 8001f08:	40014800 	.word	0x40014800
 8001f0c:	fffffeff 	.word	0xfffffeff
 8001f10:	fffffdff 	.word	0xfffffdff

08001f14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	2210      	movs	r2, #16
 8001f24:	4393      	bics	r3, r2
 8001f26:	001a      	movs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4a2e      	ldr	r2, [pc, #184]	; (8001ffc <TIM_OC2_SetConfig+0xe8>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4a2d      	ldr	r2, [pc, #180]	; (8002000 <TIM_OC2_SetConfig+0xec>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	4393      	bics	r3, r2
 8001f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a24      	ldr	r2, [pc, #144]	; (8002004 <TIM_OC2_SetConfig+0xf0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d10d      	bne.n	8001f92 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2280      	movs	r2, #128	; 0x80
 8001f7a:	4393      	bics	r3, r2
 8001f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2240      	movs	r2, #64	; 0x40
 8001f8e:	4393      	bics	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a1b      	ldr	r2, [pc, #108]	; (8002004 <TIM_OC2_SetConfig+0xf0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00b      	beq.n	8001fb2 <TIM_OC2_SetConfig+0x9e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <TIM_OC2_SetConfig+0xf4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d007      	beq.n	8001fb2 <TIM_OC2_SetConfig+0x9e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a19      	ldr	r2, [pc, #100]	; (800200c <TIM_OC2_SetConfig+0xf8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d003      	beq.n	8001fb2 <TIM_OC2_SetConfig+0x9e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a18      	ldr	r2, [pc, #96]	; (8002010 <TIM_OC2_SetConfig+0xfc>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d113      	bne.n	8001fda <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4a17      	ldr	r2, [pc, #92]	; (8002014 <TIM_OC2_SetConfig+0x100>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4a16      	ldr	r2, [pc, #88]	; (8002018 <TIM_OC2_SetConfig+0x104>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	621a      	str	r2, [r3, #32]
}
 8001ff4:	46c0      	nop			; (mov r8, r8)
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b006      	add	sp, #24
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	ffff8fff 	.word	0xffff8fff
 8002000:	fffffcff 	.word	0xfffffcff
 8002004:	40012c00 	.word	0x40012c00
 8002008:	40014000 	.word	0x40014000
 800200c:	40014400 	.word	0x40014400
 8002010:	40014800 	.word	0x40014800
 8002014:	fffffbff 	.word	0xfffffbff
 8002018:	fffff7ff 	.word	0xfffff7ff

0800201c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4a35      	ldr	r2, [pc, #212]	; (8002100 <TIM_OC3_SetConfig+0xe4>)
 800202c:	401a      	ands	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2270      	movs	r2, #112	; 0x70
 8002048:	4393      	bics	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2203      	movs	r2, #3
 8002050:	4393      	bics	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	4a28      	ldr	r2, [pc, #160]	; (8002104 <TIM_OC3_SetConfig+0xe8>)
 8002062:	4013      	ands	r3, r2
 8002064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	4313      	orrs	r3, r2
 8002070:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a24      	ldr	r2, [pc, #144]	; (8002108 <TIM_OC3_SetConfig+0xec>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d10d      	bne.n	8002096 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	4a23      	ldr	r2, [pc, #140]	; (800210c <TIM_OC3_SetConfig+0xf0>)
 800207e:	4013      	ands	r3, r2
 8002080:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	4313      	orrs	r3, r2
 800208c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	4a1f      	ldr	r2, [pc, #124]	; (8002110 <TIM_OC3_SetConfig+0xf4>)
 8002092:	4013      	ands	r3, r2
 8002094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a1b      	ldr	r2, [pc, #108]	; (8002108 <TIM_OC3_SetConfig+0xec>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00b      	beq.n	80020b6 <TIM_OC3_SetConfig+0x9a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a1c      	ldr	r2, [pc, #112]	; (8002114 <TIM_OC3_SetConfig+0xf8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <TIM_OC3_SetConfig+0x9a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a1b      	ldr	r2, [pc, #108]	; (8002118 <TIM_OC3_SetConfig+0xfc>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d003      	beq.n	80020b6 <TIM_OC3_SetConfig+0x9a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a1a      	ldr	r2, [pc, #104]	; (800211c <TIM_OC3_SetConfig+0x100>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d113      	bne.n	80020de <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4a19      	ldr	r2, [pc, #100]	; (8002120 <TIM_OC3_SetConfig+0x104>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4a18      	ldr	r2, [pc, #96]	; (8002124 <TIM_OC3_SetConfig+0x108>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	621a      	str	r2, [r3, #32]
}
 80020f8:	46c0      	nop			; (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b006      	add	sp, #24
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	fffffeff 	.word	0xfffffeff
 8002104:	fffffdff 	.word	0xfffffdff
 8002108:	40012c00 	.word	0x40012c00
 800210c:	fffff7ff 	.word	0xfffff7ff
 8002110:	fffffbff 	.word	0xfffffbff
 8002114:	40014000 	.word	0x40014000
 8002118:	40014400 	.word	0x40014400
 800211c:	40014800 	.word	0x40014800
 8002120:	ffffefff 	.word	0xffffefff
 8002124:	ffffdfff 	.word	0xffffdfff

08002128 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	4a28      	ldr	r2, [pc, #160]	; (80021d8 <TIM_OC4_SetConfig+0xb0>)
 8002138:	401a      	ands	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4a22      	ldr	r2, [pc, #136]	; (80021dc <TIM_OC4_SetConfig+0xb4>)
 8002154:	4013      	ands	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <TIM_OC4_SetConfig+0xb8>)
 800215c:	4013      	ands	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4313      	orrs	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4a1d      	ldr	r2, [pc, #116]	; (80021e4 <TIM_OC4_SetConfig+0xbc>)
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	031b      	lsls	r3, r3, #12
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a19      	ldr	r2, [pc, #100]	; (80021e8 <TIM_OC4_SetConfig+0xc0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00b      	beq.n	80021a0 <TIM_OC4_SetConfig+0x78>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a18      	ldr	r2, [pc, #96]	; (80021ec <TIM_OC4_SetConfig+0xc4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d007      	beq.n	80021a0 <TIM_OC4_SetConfig+0x78>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <TIM_OC4_SetConfig+0xc8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d003      	beq.n	80021a0 <TIM_OC4_SetConfig+0x78>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a16      	ldr	r2, [pc, #88]	; (80021f4 <TIM_OC4_SetConfig+0xcc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d109      	bne.n	80021b4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	4a15      	ldr	r2, [pc, #84]	; (80021f8 <TIM_OC4_SetConfig+0xd0>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	019b      	lsls	r3, r3, #6
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	621a      	str	r2, [r3, #32]
}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b006      	add	sp, #24
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	ffffefff 	.word	0xffffefff
 80021dc:	ffff8fff 	.word	0xffff8fff
 80021e0:	fffffcff 	.word	0xfffffcff
 80021e4:	ffffdfff 	.word	0xffffdfff
 80021e8:	40012c00 	.word	0x40012c00
 80021ec:	40014000 	.word	0x40014000
 80021f0:	40014400 	.word	0x40014400
 80021f4:	40014800 	.word	0x40014800
 80021f8:	ffffbfff 	.word	0xffffbfff

080021fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	221f      	movs	r2, #31
 800220c:	4013      	ands	r3, r2
 800220e:	2201      	movs	r2, #1
 8002210:	409a      	lsls	r2, r3
 8002212:	0013      	movs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	43d2      	mvns	r2, r2
 800221e:	401a      	ands	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a1a      	ldr	r2, [r3, #32]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	211f      	movs	r1, #31
 800222c:	400b      	ands	r3, r1
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4099      	lsls	r1, r3
 8002232:	000b      	movs	r3, r1
 8002234:	431a      	orrs	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	621a      	str	r2, [r3, #32]
}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	46bd      	mov	sp, r7
 800223e:	b006      	add	sp, #24
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	223c      	movs	r2, #60	; 0x3c
 8002252:	5c9b      	ldrb	r3, [r3, r2]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002258:	2302      	movs	r3, #2
 800225a:	e047      	b.n	80022ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	223c      	movs	r2, #60	; 0x3c
 8002260:	2101      	movs	r1, #1
 8002262:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	223d      	movs	r2, #61	; 0x3d
 8002268:	2102      	movs	r1, #2
 800226a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2270      	movs	r2, #112	; 0x70
 8002280:	4393      	bics	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4313      	orrs	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a16      	ldr	r2, [pc, #88]	; (80022f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d00f      	beq.n	80022c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	05db      	lsls	r3, r3, #23
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d009      	beq.n	80022c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a11      	ldr	r2, [pc, #68]	; (80022f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d004      	beq.n	80022c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a10      	ldr	r2, [pc, #64]	; (80022fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d10c      	bne.n	80022da <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2280      	movs	r2, #128	; 0x80
 80022c4:	4393      	bics	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	223d      	movs	r2, #61	; 0x3d
 80022de:	2101      	movs	r1, #1
 80022e0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	223c      	movs	r2, #60	; 0x3c
 80022e6:	2100      	movs	r1, #0
 80022e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	0018      	movs	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b004      	add	sp, #16
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40014000 	.word	0x40014000

08002300 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	223c      	movs	r2, #60	; 0x3c
 8002312:	5c9b      	ldrb	r3, [r3, r2]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002318:	2302      	movs	r3, #2
 800231a:	e03e      	b.n	800239a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	223c      	movs	r2, #60	; 0x3c
 8002320:	2101      	movs	r1, #1
 8002322:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	22ff      	movs	r2, #255	; 0xff
 8002328:	4393      	bics	r3, r2
 800232a:	001a      	movs	r2, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4313      	orrs	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002338:	401a      	ands	r2, r3
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	4313      	orrs	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4a18      	ldr	r2, [pc, #96]	; (80023a8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002346:	401a      	ands	r2, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4a16      	ldr	r2, [pc, #88]	; (80023ac <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002354:	401a      	ands	r2, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4a13      	ldr	r2, [pc, #76]	; (80023b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002362:	401a      	ands	r2, r3
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4a11      	ldr	r2, [pc, #68]	; (80023b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002370:	401a      	ands	r2, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800237e:	401a      	ands	r2, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	4313      	orrs	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	223c      	movs	r2, #60	; 0x3c
 8002394:	2100      	movs	r1, #0
 8002396:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	0018      	movs	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	b004      	add	sp, #16
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	fffffcff 	.word	0xfffffcff
 80023a8:	fffffbff 	.word	0xfffffbff
 80023ac:	fffff7ff 	.word	0xfffff7ff
 80023b0:	ffffefff 	.word	0xffffefff
 80023b4:	ffffdfff 	.word	0xffffdfff
 80023b8:	ffffbfff 	.word	0xffffbfff

080023bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023c4:	46c0      	nop			; (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b002      	add	sp, #8
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}

080023dc <__libc_init_array>:
 80023dc:	b570      	push	{r4, r5, r6, lr}
 80023de:	2600      	movs	r6, #0
 80023e0:	4d0c      	ldr	r5, [pc, #48]	; (8002414 <__libc_init_array+0x38>)
 80023e2:	4c0d      	ldr	r4, [pc, #52]	; (8002418 <__libc_init_array+0x3c>)
 80023e4:	1b64      	subs	r4, r4, r5
 80023e6:	10a4      	asrs	r4, r4, #2
 80023e8:	42a6      	cmp	r6, r4
 80023ea:	d109      	bne.n	8002400 <__libc_init_array+0x24>
 80023ec:	2600      	movs	r6, #0
 80023ee:	f000 f821 	bl	8002434 <_init>
 80023f2:	4d0a      	ldr	r5, [pc, #40]	; (800241c <__libc_init_array+0x40>)
 80023f4:	4c0a      	ldr	r4, [pc, #40]	; (8002420 <__libc_init_array+0x44>)
 80023f6:	1b64      	subs	r4, r4, r5
 80023f8:	10a4      	asrs	r4, r4, #2
 80023fa:	42a6      	cmp	r6, r4
 80023fc:	d105      	bne.n	800240a <__libc_init_array+0x2e>
 80023fe:	bd70      	pop	{r4, r5, r6, pc}
 8002400:	00b3      	lsls	r3, r6, #2
 8002402:	58eb      	ldr	r3, [r5, r3]
 8002404:	4798      	blx	r3
 8002406:	3601      	adds	r6, #1
 8002408:	e7ee      	b.n	80023e8 <__libc_init_array+0xc>
 800240a:	00b3      	lsls	r3, r6, #2
 800240c:	58eb      	ldr	r3, [r5, r3]
 800240e:	4798      	blx	r3
 8002410:	3601      	adds	r6, #1
 8002412:	e7f2      	b.n	80023fa <__libc_init_array+0x1e>
 8002414:	0800247c 	.word	0x0800247c
 8002418:	0800247c 	.word	0x0800247c
 800241c:	0800247c 	.word	0x0800247c
 8002420:	08002480 	.word	0x08002480

08002424 <memset>:
 8002424:	0003      	movs	r3, r0
 8002426:	1812      	adds	r2, r2, r0
 8002428:	4293      	cmp	r3, r2
 800242a:	d100      	bne.n	800242e <memset+0xa>
 800242c:	4770      	bx	lr
 800242e:	7019      	strb	r1, [r3, #0]
 8002430:	3301      	adds	r3, #1
 8002432:	e7f9      	b.n	8002428 <memset+0x4>

08002434 <_init>:
 8002434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800243a:	bc08      	pop	{r3}
 800243c:	469e      	mov	lr, r3
 800243e:	4770      	bx	lr

08002440 <_fini>:
 8002440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002446:	bc08      	pop	{r3}
 8002448:	469e      	mov	lr, r3
 800244a:	4770      	bx	lr
